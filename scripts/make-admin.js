/**
 * Script pour donner les droits d'administrateur √† un utilisateur
 * 
 * Usage:
 * node scripts/make-admin.js <email-utilisateur>
 * 
 * Exemple:
 * node scripts/make-admin.js admin@bobiconic.com
 */

const { initializeApp } = require('firebase/app');
const { getFirestore, doc, getDoc, setDoc, updateDoc } = require('firebase/firestore');
const { getAuth, signInWithEmailAndPassword } = require('firebase/auth');

// Configuration Firebase (√† adapter selon votre projet)
const firebaseConfig = {
  // Remplacez par votre configuration Firebase
  apiKey: "AIzaSyBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
  authDomain: "your-project.firebaseapp.com",
  projectId: "your-project-id",
  storageBucket: "your-project.appspot.com",
  messagingSenderId: "123456789",
  appId: "1:123456789:web:abcdef123456"
};

// Initialiser Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

async function makeUserAdmin(email) {
  try {
    console.log(`üîê Connexion en tant qu'administrateur...`);
    
    // Connexion avec un compte admin existant ou cr√©ation
    // Remplacez par les identifiants d'un compte admin existant
    const adminEmail = process.env.ADMIN_EMAIL || 'admin@bobiconic.com';
    const adminPassword = process.env.ADMIN_PASSWORD || 'admin123456';
    
    try {
      await signInWithEmailAndPassword(auth, adminEmail, adminPassword);
      console.log(`‚úÖ Connect√© en tant qu'administrateur: ${adminEmail}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Impossible de se connecter avec ${adminEmail}, tentative de cr√©ation...`);
      
      // Si pas de compte admin, on peut cr√©er un utilisateur directement
      // ou utiliser une autre m√©thode selon votre configuration
      console.log(`‚ÑπÔ∏è Veuillez vous connecter manuellement avec un compte administrateur`);
      return;
    }

    console.log(`üîç Recherche de l'utilisateur: ${email}`);
    
    // Rechercher l'utilisateur par email
    // Note: Cette m√©thode n√©cessite un index sur le champ email
    // ou une autre m√©thode selon votre structure de donn√©es
    
    // Pour l'instant, on va cr√©er/ mettre √† jour directement le document utilisateur
    // en supposant que l'UID est bas√© sur l'email ou connu
    
    // M√©thode 1: Si vous connaissez l'UID
    const uid = process.env.USER_UID;
    if (uid) {
      await updateUserRole(uid, email);
      return;
    }
    
    // M√©thode 2: Cr√©er un document utilisateur avec un UID g√©n√©r√©
    const generatedUid = `admin_${Date.now()}`;
    await createUserDocument(generatedUid, email);
    
  } catch (error) {
    console.error(`‚ùå Erreur:`, error.message);
    process.exit(1);
  }
}

async function updateUserRole(uid, email) {
  try {
    const userRef = doc(db, 'users', uid);
    
    // V√©rifier si l'utilisateur existe
    const userDoc = await getDoc(userRef);
    
    if (userDoc.exists()) {
      // Mettre √† jour le r√¥le existant
      await updateDoc(userRef, {
        role: 'admin',
        email: email,
        updatedAt: new Date(),
        updatedBy: auth.currentUser?.uid || 'script'
      });
      console.log(`‚úÖ Utilisateur ${email} (${uid}) promu administrateur`);
    } else {
      // Cr√©er un nouvel utilisateur admin
      await setDoc(userRef, {
        email: email,
        role: 'admin',
        createdAt: new Date(),
        createdBy: auth.currentUser?.uid || 'script',
        isActive: true,
        permissions: ['admin', 'read', 'write', 'delete']
      });
      console.log(`‚úÖ Nouvel utilisateur admin cr√©√©: ${email} (${uid})`);
    }
    
    console.log(`üéâ L'utilisateur ${email} a maintenant les droits d'administrateur!`);
    console.log(`üîó Acc√©dez √† l'admin via: http://localhost:8100/admin`);
    
  } catch (error) {
    console.error(`‚ùå Erreur lors de la mise √† jour du r√¥le:`, error.message);
    throw error;
  }
}

async function createUserDocument(uid, email) {
  try {
    const userRef = doc(db, 'users', uid);
    
    await setDoc(userRef, {
      email: email,
      role: 'admin',
      createdAt: new Date(),
      createdBy: 'script',
      isActive: true,
      permissions: ['admin', 'read', 'write', 'delete'],
      profile: {
        displayName: email.split('@')[0],
        email: email
      }
    });
    
    console.log(`‚úÖ Nouvel utilisateur admin cr√©√©: ${email} (${uid})`);
    console.log(`üéâ L'utilisateur ${email} a maintenant les droits d'administrateur!`);
    console.log(`üîó Acc√©dez √† l'admin via: http://localhost:8100/admin`);
    console.log(`üìù UID g√©n√©r√©: ${uid} (√† utiliser pour la connexion)`);
    
  } catch (error) {
    console.error(`‚ùå Erreur lors de la cr√©ation de l'utilisateur:`, error.message);
    throw error;
  }
}

// Fonction principale
async function main() {
  const email = process.argv[2];
  
  if (!email) {
    console.log(`‚ùå Usage: node scripts/make-admin.js <email-utilisateur>`);
    console.log(`üìù Exemple: node scripts/make-admin.js admin@bobiconic.com`);
    process.exit(1);
  }
  
  console.log(`üöÄ D√©marrage du script de promotion administrateur...`);
  console.log(`üìß Email cible: ${email}`);
  
  await makeUserAdmin(email);
  
  console.log(`‚ú® Script termin√© avec succ√®s!`);
  process.exit(0);
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Erreur non g√©r√©e:', reason);
  process.exit(1);
});

// Ex√©cuter le script
if (require.main === module) {
  main();
}

module.exports = { makeUserAdmin, updateUserRole, createUserDocument }; 