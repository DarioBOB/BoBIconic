Pour afficher dans chaque « hublot » (fenêtre d’avion) une carte qui ressemble à ce que verrait un passager—avec un niveau de zoom adapté à l’altitude—on peut procéder en trois grandes étapes :

1. **Définir un composant « Hublot » (WindowComponent) réutilisable**
2. **Intégrer une bibliothèque de cartographie (par exemple Leaflet ou Google Maps) dans Ionic/Angular**
3. **Calculer dynamiquement le niveau de zoom en fonction de l’altitude**

Ci-dessous un tutoriel complet en Angular + Ionic (version ≥ 5) qui illustre ces trois points. Nous utiliserons **Leaflet** pour l’exemple, mais vous pouvez adapter l’approche à Google Maps JS API si vous préférez.

---

## 1. Créer un composant « Hublot » (WindowComponent)

L’idée est de faire un composant Angular/Ionic qui représente un « hublot » d’avion, avec un contour (bordure arrondie) et un `<div>` interne qui servira de conteneur Leaflet. Chaque instance de ce composant recevra en `@Input()` :

* la position géographique (latitude, longitude) courante de l’avion
* l’altitude (en mètres) courante pour en déduire le zoom à appliquer

### 1.1 Génération du composant

Depuis la racine de votre projet Ionic/Angular, lancez :

```bash
ionic generate component components/window
```

Cela crée :

```
src/
  app/
    components/
      window/
        window.component.ts
        window.component.html
        window.component.scss
        window.component.spec.ts
```

### 1.2 Template (window\.component.html)

Dans `window.component.html`, on va définir la structure HTML du hublot :

```html
<ion-card class="hublot-card">
  <!-- Bordure du hublot -->
  <div class="hublot-frame">
    <!-- Conteneur dans lequel Leaflet affichera la carte -->
    <div #mapContainer class="map-container"></div>
  </div>
</ion-card>
```

* `<ion-card>` nous sert juste de wrapper pour la mise en page (vous pouvez aussi utiliser un `<div>` pur si vous préférez).
* `.hublot-frame` sera un conteneur arrondi (la « fenêtre »)
* Le `<div #mapContainer>` est la cible dans laquelle on injectera le `L.map(...)` de Leaflet.

### 1.3 Styles CSS/SCSS (window\.component.scss)

On veut que le hublot ressemble à une fenêtre d’avion, donc généralement :

```scss
/* window.component.scss */

.hublot-card {
  --background: transparent;
  --box-shadow: none;
  /* S’il y a un card, on retire l’ombre et le fond blanc par défaut */
  margin: 0;
  padding: 0;
}

.hublot-frame {
  position: relative;
  width: 300px;     /* ou tout autre dimension adaptée */
  height: 400px;    /* ratio vertical pour simuler forme hublot */
  border-radius: 50% / 60%; /* forme ovale */
  overflow: hidden;
  background: #000; /* bordure noire, par exemple */
  box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.5);
}

/* Le conteneur de la carte prend tout l’espace intérieur */
.map-container {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
}
```

> **Explication rapide des styles**
>
> * Le `.hublot-frame` est un parent avec `border-radius` élevé pour obtenir une forme ovale (portrait).
> * `overflow: hidden` masque tout ce qui dépasse du cadre arrondi.
> * `.map-container` en `position: absolute` rempli 100 % de la zone interne arrondie.

### 1.4 Logique TypeScript (window\.component.ts)

Dans `window.component.ts`, on va :

1. Importer Leaflet
2. Déclarer deux propriétés `@Input()`: latitude, longitude, altitude
3. À l’initialisation (ngAfterViewInit), créer la carte Leaflet dans le `mapContainer`
4. Exposer une fonction utilitaire `getZoomFromAltitude(altitude: number): number`

```ts
// window.component.ts
import {
  Component,
  Input,
  OnChanges,
  AfterViewInit,
  OnDestroy,
  SimpleChanges,
  ViewChild,
  ElementRef,
} from '@angular/core';
import * as L from 'leaflet';

@Component({
  selector: 'app-window',
  templateUrl: './window.component.html',
  styleUrls: ['./window.component.scss'],
})
export class WindowComponent implements AfterViewInit, OnChanges, OnDestroy {
  @ViewChild('mapContainer', { static: true }) mapContainer!: ElementRef<HTMLDivElement>;

  @Input() latitude!: number;
  @Input() longitude!: number;
  @Input() altitude!: number; // en mètres

  private mapInstance!: L.Map;
  private tileLayer!: L.TileLayer;

  // Marker ou icône au centre éventuel (ex : position avion / curseur)
  private centerMarker?: L.Marker;

  constructor() {}

  ngAfterViewInit(): void {
    this.initializeMap();
  }

  ngOnChanges(changes: SimpleChanges): void {
    // Si la carte existe déjà et que lat/lng ou altitude changent, on met à jour
    if (this.mapInstance && (changes['latitude'] || changes['longitude'] || changes['altitude'])) {
      const lat = this.latitude;
      const lng = this.longitude;
      const alt = this.altitude;

      // Calcule le nouveau zoom en fonction de l’altitude
      const newZoom = this.getZoomFromAltitude(alt, lat);

      // Recentrer + zoomer la carte
      this.mapInstance.setView([lat, lng], newZoom);

      // Si on veut un marker au centre :
      if (!this.centerMarker) {
        this.centerMarker = L.marker([lat, lng], {
          icon: L.divIcon({
            html: '<i class="fas fa-plane"></i>', // par exemple une icône d’avion FontAwesome
            className: 'plane-icon',
            iconSize: [24, 24],
            iconAnchor: [12, 12],
          }),
        }).addTo(this.mapInstance);
      } else {
        this.centerMarker.setLatLng([lat, lng]);
      }
    }
  }

  ngOnDestroy(): void {
    // Nettoyer la carte pour libérer les listeners
    if (this.mapInstance) {
      this.mapInstance.remove();
    }
  }

  private initializeMap(): void {
    // Initialement, on définit la carte avec lat/lng et zoom d’altitude initial
    const lat = this.latitude || 0;
    const lng = this.longitude || 0;
    const alt = this.altitude || 10000; // valeur par défaut si undefined

    const initialZoom = this.getZoomFromAltitude(alt, lat);

    // Créer l’instance Leaflet dans le div de référence
    this.mapInstance = L.map(this.mapContainer.nativeElement, {
      center: [lat, lng],
      zoom: initialZoom,
      zoomControl: false,
      attributionControl: false,
      dragging: false,        // Pour que le passager ne déplace pas la carte
      scrollWheelZoom: false, // Désactive le scroll
      doubleClickZoom: false,
      boxZoom: false,
      keyboard: false,
      tap: false,
      touchZoom: false,
    });

    // Ajouter un tile layer (OpenStreetMap ici, vous pouvez mettre Google ou autre)
    this.tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      tileSize: 256,
      zoomOffset: 0,
    });

    this.tileLayer.addTo(this.mapInstance);

    // Si on veut un marqueur/avion au centre (optionnel) :
    this.centerMarker = L.marker([lat, lng], {
      icon: L.divIcon({
        html: '<i class="fas fa-plane"></i>',
        className: 'plane-icon',
        iconSize: [24, 24],
        iconAnchor: [12, 12],
      }),
    }).addTo(this.mapInstance);
  }

  /**
   * Calcule un niveau de zoom Leaflet (typiquement entre 0 et 19)
   * en fonction de l’altitude (en mètres). Vous pouvez affiner cette formule
   * pour qu’elle colle aux cartes que vous utilisez (Google, OSM, etc.).
   *
   * @param altitude Altitude en mètres
   * @param lat      Latitude (nécessaire pour ajuster l’échelle à la latitude)
   * @returns Zoom Leaflet (integer)
   */
  private getZoomFromAltitude(altitude: number, lat: number): number {
    // Méthode simple (approximative) : on part de la relation entre altitude et ground resolution
    // resolution (mètre/pixel) = altitude * (π/180) × EarthRadius × cos(lat) / (256 * 2^zoom)
    // Pour simplifier, on peut inverser la logique en cherchant zoom ≈ log2( altitude_coefficient / altitude )
    // Ici, on fait un mapping empirique : altitude élevée => zoom faible, altitude basse => zoom élevé.

    // Constante empirique à ajuster (varie selon la projection)
    const EARTH_RADIUS = 6378137; // en mètres
    // Pour Leaflet/OSM, à la latitude donnée, distance par pixel ≈ (cos(lat) * 2πR) / (256 × 2^zoom)
    // Donc 2^zoom ≈ (cos(lat) * 2πR) / (256 × resolution). On veut resolution ≈ altitude pour avoir visibilité depuis l’avion.
    // On réarrange :
    // zoom ≈ log2( (cos(lat) * 2π R) / (256 * altitude) )

    const latRad = (lat * Math.PI) / 180;
    const denominator = 256 * altitude;
    const numerator = Math.cos(latRad) * 2 * Math.PI * EARTH_RADIUS;
    let zoom = Math.log2(numerator / denominator);

    // Clamp entre 0 et 19 (Leaflet OSM)
    zoom = Math.max(0, Math.min(19, zoom));

    // Arrondir à l’entier le plus proche
    return Math.round(zoom);
  }
}
```

#### Explications détaillées

1. **Cycle de vie**

   * `ngAfterViewInit()` : on crée vraiment la carte Leaflet quand le DOM (le `<div #mapContainer>`) est disponible.
   * `ngOnChanges(changes: SimpleChanges)` : quand l’altitude ou la position change (Input), on recalcule le niveau de zoom et on recadre la carte.

2. **Désactivation des interactions**
   On a mis toutes les options (dragging, scrollWheelZoom, doubleClickZoom, etc.) à `false` pour simuler la vue depuis un siège d’avion : le passager ne déplace pas la carte à la main.

3. **Calcul du niveau de zoom `getZoomFromAltitude(...)`**

   * Cette version est une formule théorique pour OSM/Leaflet :

     $$
       \text{resolution} = \frac{\cos(\text{lat})\times2\pi\,R}{256 \times 2^\text{zoom}}
     $$

     Où `resolution` (en m/pixel) correspond à la distance sol couverte par un pixel selon la latitude.
   * Si vous êtes à une altitude `h`, un horizon visuel « logique » suppose que vous voyez une certaine étendue au sol (dans la réalité c’est plus complexe, mais pour un effet visuel, on prend `resolution ≈ h`).
   * On solve pour `zoom` :

     $$
       2^\text{zoom} = \frac{\cos(\text{lat})\times 2\pi R}{256 \times h} 
       \quad\Longrightarrow\quad
       \text{zoom} = \log_2\!\Bigl(\frac{\cos(\text{lat}) \times 2\pi R}{256 \times h}\Bigr).
     $$
   * On retient l’entier le plus proche, borné entre \[0 ; 19].

4. **Marqueur central**
   Je l’ai mis pour simuler un icône d’avion au centre de la carte, mais vous pouvez le retirer si dessous vous ne voulez pas d’icône.

---

## 2. Installer et configurer Leaflet dans un projet Ionic/Angular

### 2.1 Installation des dépendances

```bash
npm install leaflet
npm install @types/leaflet --save-dev
```

> **IMPORTANT** : Leaflet a besoin de son fichier CSS (pour bien afficher les tuiles, le zoom, etc.).
> Dans `angular.json`, ajoutez (sous `projects -> YOUR_APP_NAME -> architect -> build -> options -> styles`) :

```jsonc
"styles": [
  "src/global.scss",
  "node_modules/leaflet/dist/leaflet.css"
],
```

Si vous utilisez `ionic serve`, redémarrez-le pour que le CSS de Leaflet soit pris en compte.

### 2.2 Fix des icônes Leaflet (optionnel)

Par défaut, les icônes « marker » de Leaflet ne se chargent pas bien dans certains environnements Angular (+ Webpack), car il faut configurer les URLs vers les images. Dans notre exemple, on utilise un `divIcon` personnalisé, donc on n’a pas forcément besoin des `marker-icon.png`.
Si vous voulez tout de même utiliser les marqueurs standard de Leaflet, ajoutez dans `main.ts` (ou dans le service au démarrage) :

```ts
import * as L from 'leaflet';

delete L.Icon.Default.prototype._getIconUrl;

L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'assets/marker-icon-2x.png',
  iconUrl: 'assets/marker-icon.png',
  shadowUrl: 'assets/marker-shadow.png',
});
```

Et copiez les fichiers `marker-icon.png`, `marker-icon-2x.png`, `marker-shadow.png` depuis `node_modules/leaflet/dist/images/` vers `src/assets/`.

---

## 3. Utilisation dans une page Ionic (exemple : home.page)

Supposons que dans `home.page.html`, vous voulez afficher deux hublots côte à côte (simulant deux fenêtres d’avion). Vous pouvez faire par exemple :

```html
<!-- home.page.html -->
<ion-header>
  <ion-toolbar>
    <ion-title>Vue depuis mon hublot</ion-title>
  </ion-toolbar>
</ion-header>

<ion-content class="ion-padding">
  <div class="hublots-container">
    <!-- Hublot passager gauche -->
    <app-window
      [latitude]="currentLat"
      [longitude]="currentLng"
      [altitude]="currentAlt"
    ></app-window>

    <!-- Hublot passager droite (même position ou position décalée ?) -->
    <app-window
      [latitude]="currentLat2"
      [longitude]="currentLng2"
      [altitude]="currentAlt2"
    ></app-window>
  </div>
</ion-content>
```

Et dans `home.page.scss` :

```scss
/* home.page.scss */
.hublots-container {
  display: flex;
  justify-content: space-around;
  flex-wrap: wrap;
  margin-top: 16px;
}

/* Ajustez la taille des composants window s’ils ont besoin d’être plus petits ou plus grands */
app-window {
  margin: 8px;
}
```

### 3.1 Exemple de logique TypeScript de la page (home.page.ts)

```ts
// home.page.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-home',
  templateUrl: 'home.page.html',
  styleUrls: ['home.page.scss'],
})
export class HomePage implements OnInit {
  // Exemple de positions/altitudes (pour deux hublots, gauche et droite)
  currentLat = 48.8566;   // Paris par exemple
  currentLng = 2.3522;
  currentAlt = 10000;     // 10 000 m → vol en croisière

  currentLat2 = 48.8566;
  currentLng2 = 2.3622;   // légèrment décalé pour illustrer la vue depuis l’autre hublot
  currentAlt2 = 10000;

  constructor() {}

  ngOnInit(): void {
    // Dans un vrai scénario, vous pourriez récupérer la position de l’avion via une API ou une simulation
    // ici on garde des valeurs statiques pour l’exemple
  }
}
```

Si vous voulez simuler le changement d’altitude (par exemple quand l’avion décolle puis monte), il suffira de faire évoluer `currentAlt` dans un intervalle ou via un slider.

---

## 4. Ajuster la formule de zoom / affiner la visibilité

La formule du `getZoomFromAltitude()` fournie est une approximation (qui part du principe que la « résolution » requise en mètre/pixel doit être proche de l’altitude de vol). Selon la bibliothèque de tuiles que vous utilisez (OSM, Google, Mapbox…), la correspondance exacte altitude ↔ zoom peut varier. Quelques conseils pour la calibrer :

1. **Tester quelques paliers d’altitude réels**

   * À 10 000 m (≈ vol de croisière), on est typiquement autour de **zoom 4–5** pour voir la taille d’un pays ou d’une grande région.
   * À 5 000 m, on va plutôt vers **zoom 6–7** (on voit une ville entière).
   * À 1 000 m (cabotage bas/atterrissage), on sera entre **zoom 10–12** (on distingue clairement les routes principales).

   Mesurez « à l’œil » quelles zones vous voulez voir à quelles altitudes, et adaptez la constante dans la formule.

2. **Corriger la latitude**
   La formule contient un `cos(lat)` pour ajuster la taille de pixel selon la latitude. Si votre avion décrit toujours un vol proche d’une latitude donnée, ça reste assez stable. Sinon, si vous préférez ignorer la latitude, vous pouvez remplacer :

   ```ts
   const numerator = Math.cos(latRad) * 2 * Math.PI * EARTH_RADIUS;
   ```

   par simplement `2 * Math.PI * EARTH_RADIUS`, et donc :

   ```ts
   let zoom = Math.log2((2 * Math.PI * EARTH_RADIUS) / (256 * altitude));
   ```

3. **Clamping / zone de sécurité**
   Pour éviter un zoom négatif ou extrêmement élevé, on fait toujours :

   ```ts
   zoom = Math.max(0, Math.min(19, zoom));
   return Math.round(zoom);
   ```

---

## 5. Résultat visuel

* Chaque `<app-window>` affiche un hublot ovale.
* Au centre, la carte Leaflet est affichée sans contrôle utilisateur (pas de pan, pas de zoom par scroll).
* En fonction des `@Input()` `[latitude]`, `[longitude]` et `[altitude]`, la carte se centre automatiquement et le niveau de zoom est recalculé.
* Si vous liez (binding) ces trois valeurs à des observables/rxjs (par exemple flux de télémétrie de vol), la vue de chaque hublot s’actualisera en temps réel dès que la position ou l’altitude change.

---

## 6. Alternatives / Points d’amélioration

1. **Passer à Google Maps JS API**

   * Si vous préférez la qualité des tuiles Google, remplacez Leaflet par l’API JavaScript de Google Maps.
   * Le principe reste le même : dans `ngAfterViewInit` vous créez `new google.maps.Map(this.mapContainer.nativeElement, { center: {lat, lng}, zoom })`, puis appelez `map.setZoom(newZoom)` et `map.setCenter({lat,lng})` à chaque changement.
   * La formule de zoom ≈ `log2(...)` reste valide, mais les plages de zoom Google (0–21) sont un peu différentes.

2. **Ajouter un masque CSS sur l’écran**

   * Pour un rendu plus « assez immersif », vous pouvez créer un `<div class="mask"></div>` au-dessus de la carte, avec un dégradé (bords foncés) ; puis laisser la partie centrale (cercle/ovale) totalement transparente pour simuler la lunette de l’avion.
   * Exemple de masque :

     ```scss
     .hublot-frame {
       position: relative;
       width: 300px;
       height: 400px;
     }
     .hublot-frame::before {
       content: '';
       position: absolute;
       top: 0; left: 0;
       width: 100%; height: 100%;
       background: radial-gradient(
         ellipse at center,
         transparent 60%,
         rgba(0,0,0,0.7) 100%
       );
       pointer-events: none;
       z-index: 10;
     }
     .map-container {
       z-index: 1;
     }
     ```

     Ici, on superpose un dégradé radial : au centre (60 %) c’est transparent pour voir la carte, puis les bords deviennent foncés (≈ 0.7) pour donner l’impression d’un hublot au-dessus de la vitre.

3. **Affichage d’un curseur ou d’une « singleton plane icon »**

   * Plutôt que d’utiliser un `L.marker` custom, vous pouvez directement injecter dans la DIV un `<img src="avion.svg" class="plane-icon">` positionné en `position: absolute; top: 50%; left: 50%; transform: translate(-50%,-50%); z-index: 100;` pour simuler l’avion qui se déplace au centre, et animer sa rotation (par ex. incliner vers la droite/gauche selon le virage de l’avion).
   * Ensuite la carte bouge sous l’icône.

4. **Gestion des performances**

   * Si vous avez besoin d’afficher plusieurs hublots en parallèle (2, 3 ou plus), Leaflet peut rester léger si vous n’autorisez pas les interactions. Cependant, si vous multipliez par 4 ou 5, surveillez la mémoire/CPU.
   * Une optimisation : n’actualisez le `map.setView()` QUE lorsque l’altitude a varié au-delà d’un certain seuil (ex. ± 500 m) pour éviter des re-rendus trop fréquents.

---

## 7. Résumé de la mise en œuvre

1. **Créer un composant Angular/Ionic** (`WindowComponent`) avec trois `@Input()` :

   ```ts
   @Input() latitude!: number;
   @Input() longitude!: number;
   @Input() altitude!: number;
   ```
2. **Dans `ngAfterViewInit`**, initialiser la carte Leaflet dans le `<div #mapContainer>`.
3. **Dans `ngOnChanges`**, à chaque changement d’`@Input()`, recalculer le zoom via une fonction qui convertit l’altitude en niveau de zoom.
4. **Cacher les contrôles Leaflet** pour que l’usager ne puisse pas glisser/zoomer manuellement.
5. **Styliser le composant** pour que le `<div>` parent ait une forme ovale et qu’on ne voie la carte qu’à travers ce hublot.
6. **Utiliser ce composant n’importe où dans l’app Ionic/Angular**, en passant les coordonnées et l’altitude dynamiquement (ex. via un service de télémétrie ou une simulation).

En suivant ces étapes, vous obtenez deux (ou plusieurs) hublots dans votre application Ionic/Angular, chacun affichant une carte « vue du ciel », dont le niveau de zoom évolue automatiquement avec l’altitude. Free-feel pour ajuster la formule de zoom : en général, testez quelques altitudes réelles pour calibrer la constante et obtenir le rendu visuel le plus proche possible de ce qu’on verrait dans un vrai avion.

---

### Code complet récapitulatif

#### window\.component.html

```html
<ion-card class="hublot-card">
  <div class="hublot-frame">
    <div #mapContainer class="map-container"></div>
  </div>
</ion-card>
```

#### window\.component.scss

```scss
.hublot-card {
  --background: transparent;
  --box-shadow: none;
  margin: 0;
  padding: 0;
}

.hublot-frame {
  position: relative;
  width: 300px;
  height: 400px;
  border-radius: 50% / 60%;
  overflow: hidden;
  background: #000;
  box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.5);
}

.hublot-frame::before {
  content: '';
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: radial-gradient(
    ellipse at center,
    transparent 60%,
    rgba(0,0,0,0.7) 100%
  );
  pointer-events: none;
  z-index: 10;
}

.map-container {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
}

.plane-icon {
  font-size: 24px;
  color: white;
  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.7);
}
```

#### window\.component.ts

```ts
import {
  Component,
  Input,
  OnChanges,
  AfterViewInit,
  OnDestroy,
  SimpleChanges,
  ViewChild,
  ElementRef,
} from '@angular/core';
import * as L from 'leaflet';

@Component({
  selector: 'app-window',
  templateUrl: './window.component.html',
  styleUrls: ['./window.component.scss'],
})
export class WindowComponent implements AfterViewInit, OnChanges, OnDestroy {
  @ViewChild('mapContainer', { static: true }) mapContainer!: ElementRef<HTMLDivElement>;

  @Input() latitude!: number;
  @Input() longitude!: number;
  @Input() altitude!: number; // en mètres

  private mapInstance!: L.Map;
  private tileLayer!: L.TileLayer;
  private centerMarker?: L.Marker;

  ngAfterViewInit(): void {
    this.initializeMap();
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (this.mapInstance && (changes['latitude'] || changes['longitude'] || changes['altitude'])) {
      const lat = this.latitude;
      const lng = this.longitude;
      const alt = this.altitude;

      const newZoom = this.getZoomFromAltitude(alt, lat);
      this.mapInstance.setView([lat, lng], newZoom);

      if (!this.centerMarker) {
        this.centerMarker = L.marker([lat, lng], {
          icon: L.divIcon({
            html: '<i class="fas fa-plane"></i>',
            className: 'plane-icon',
            iconSize: [24, 24],
            iconAnchor: [12, 12],
          }),
        }).addTo(this.mapInstance);
      } else {
        this.centerMarker.setLatLng([lat, lng]);
      }
    }
  }

  ngOnDestroy(): void {
    if (this.mapInstance) {
      this.mapInstance.remove();
    }
  }

  private initializeMap(): void {
    const lat = this.latitude || 0;
    const lng = this.longitude || 0;
    const alt = this.altitude || 10000;

    const initialZoom = this.getZoomFromAltitude(alt, lat);

    this.mapInstance = L.map(this.mapContainer.nativeElement, {
      center: [lat, lng],
      zoom: initialZoom,
      zoomControl: false,
      attributionControl: false,
      dragging: false,
      scrollWheelZoom: false,
      doubleClickZoom: false,
      boxZoom: false,
      keyboard: false,
      tap: false,
      touchZoom: false,
    });

    this.tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      tileSize: 256,
    });

    this.tileLayer.addTo(this.mapInstance);

    this.centerMarker = L.marker([lat, lng], {
      icon: L.divIcon({
        html: '<i class="fas fa-plane"></i>',
        className: 'plane-icon',
        iconSize: [24, 24],
        iconAnchor: [12, 12],
      }),
    }).addTo(this.mapInstance);
  }

  private getZoomFromAltitude(altitude: number, lat: number): number {
    const EARTH_RADIUS = 6378137; // en mètres
    const latRad = (lat * Math.PI) / 180;
    const numerator = Math.cos(latRad) * 2 * Math.PI * EARTH_RADIUS;
    const denominator = 256 * altitude;
    let zoom = Math.log2(numerator / denominator);

    zoom = Math.max(0, Math.min(19, zoom));
    return Math.round(zoom);
  }
}
```

---

### 8. Conclusion

* Vous avez désormais un composant `app-window` qui, lorsqu’on lui passe en `@Input()` :

  * `latitude` (number),
  * `longitude` (number),
  * `altitude` (number),
    affiche une carte Leaflet centrée et zoomée “comme si l’utilisateur regardait par son hublot d’avion”.
* Il suffit ensuite d’intégrer deux (ou plusieurs) instances de ce composant dans une page Ionic (par exemple `home.page.html`) pour réaliser l’effet « deux hublots côte à côte ».
* Vous n’avez plus qu’à nourrir ces entrées (`latitude`, `longitude`, `altitude`) avec les bonnes valeurs (qu’elles viennent d’une API de géolocalisation d’avion, d’une simulation, d’un slider, etc.).
* Enfin, vous pouvez adapter la formule de zoom (dans `getZoomFromAltitude`) pour la rendre plus réaliste selon la projection de tuiles que vous utilisez (OSM, Mapbox, Google, etc.).

Avec cette approche, en Ionic/Angular, vous obtenez très rapidement des cartes « immersives » en forme de hublot, dont le zoom s’ajuste en fonction de l’altitude afin de donner l’impression de voir réellement le sol à la hauteur de vol.
