Pour rendre ton application Ionic (basée sur Capacitor ou Cordova) disponible sur les stores mobiles (Google Play Store pour Android et App Store pour iOS), il faut suivre plusieurs étapes :

---

## 1. Préparer l’environnement et les comptes développeurs

1. **Créer un compte Google Play Developer**

   * Va sur [https://play.google.com/apps/publish/](https://play.google.com/apps/publish/)
   * Inscris-toi (paiement d’un droit unique de publication, \~ 25 USD).
   * Une fois le compte créé, tu auras accès à la console Google Play (Play Console) pour gérer tes applications Android.

2. **Créer un compte Apple Developer**

   * Va sur [https://developer.apple.com/programs/](https://developer.apple.com/programs/)
   * Abonne-toi au programme Apple Developer (coût annuel \~ 99 USD).
   * Cela te donne accès à App Store Connect et aux outils nécessaires pour signer et soumettre une app iOS.

3. **Installer les outils locaux nécessaires**

   * **Node.js** (LTS)
   * **Ionic CLI** et **Capacitor** (ou Cordova si tu utilises Cordova)
   * **Android Studio** avec le SDK Android (pour compiler et émuler Android)
   * **Xcode** (dernière version) sur macOS (pour compiler et empaqueter iOS)
   * **JDK** (Java Development Kit) pour Android
   * Un **certificat SSL** dans la mesure où tu communiques (API, authentification), mais ce n’est pas strictement nécessaire pour la publication elle-même.

---

## 2. Ajouter les plateformes natives au projet Ionic

### 2.1 Si tu utilises Capacitor (recommandé aujourd’hui)

1. Dans le dossier racine du projet, installe Capacitor (si ce n’est pas déjà fait) :

   ```bash
   npm install @capacitor/core @capacitor/cli --save
   ```

2. Initialise Capacitor (si c’est un projet Ionic récent, tu devrais déjà l’avoir initialisé ; sinon) :

   ```bash
   npx cap init
   ```

   * Choisis un nom (“AppName”) et un ID de package (format reverse domain, ex. `com.mondomaine.appname`).

3. Ajoute la plateforme Android et iOS :

   ```bash
   npx cap add android
   npx cap add ios
   ```

   Cela crée deux dossiers natifs :

   * `android/`
   * `ios/`

4. À chaque fois que tu modifies ton code web (HTML/TS/CSS), reconstruis-le :

   ```bash
   ionic build --prod
   ```

   puis copie les fichiers web dans les projets natifs :

   ```bash
   npx cap copy
   ```

   (et si tu changes la configuration Capacitor, fais aussi `npx cap sync`.)

### 2.2 Si tu utilises Cordova (moins répandu sur Ionic 5+)

1. Installe Cordova (si pas déjà fait) :

   ```bash
   npm install -g cordova
   ```
2. Ajoute les plateformes :

   ```bash
   ionic cordova platform add android
   ionic cordova platform add ios
   ```
3. Pour compiler en mode production, tu lanceras :

   ```bash
   ionic cordova build android --prod --release
   ionic cordova build ios --prod
   ```

---

## 3. Configurer et générer le binaire Android (APK ou AAB)

1. **Ouvrir le projet dans Android Studio**

   * Depuis la racine du projet Ionic, exécute :

     ```bash
     npx cap open android
     ```

     Cela ouvre le dossier `android/` dans Android Studio.

2. **Vérifier la configuration du Gradle**

   * Dans `android/app/build.gradle`, vérifie que l’`applicationId` est bien ton identifiant de package (par exemple `com.mondomaine.appname`).
   * Vérifie la `versionCode` et la `versionName` (dans le même fichier). À chaque nouvelle mise à jour sur le Play Store, augmente `versionCode` (un entier incrémental) et mets à jour `versionName` (par exemple de `1.0.0` à `1.0.1`, etc.).

3. **Créer une clé de signature (keystore)**

   * Si tu n’as pas encore de keystore, génère-en un via la commande :

     ```bash
     keytool -genkeypair -v -keystore ~/chemin/vers/monapp_release.keystore \
       -alias monappalias -keyalg RSA -keysize 2048 -validity 10000
     ```

     * Il te demande un mot de passe pour le `keystore` et un mot de passe pour l’`alias`.
     * Remarque où tu l’as enregistré, et note bien le mot de passe : tu en auras besoin pour signer l’APK/AAB.

4. **Configurer la signature dans Gradle**

   * Dans le fichier `android/app/build.gradle`, ajoute dans `android { signingConfigs { … } }` une configuration semblable à :

     ```groovy
     android {
       ...

       signingConfigs {
         release {
           keyAlias 'monappalias'
           keyPassword 'motdepasse_alias'
           storeFile file('/Users/monutilisateur/chemin/vers/monapp_release.keystore')
           storePassword 'motdepasse_keystore'
         }
       }

       buildTypes {
         release {
           signingConfig signingConfigs.release
           minifyEnabled false
           proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
       }
     }
     ```

5. **Générer un AAB (Android App Bundle) ou APK signé**

   * Dans Android Studio, va dans **Build > Generate Signed Bundle / APK…**

     * Choisis **Android App Bundle** (recommandé) ou **APK**.
     * Sélectionne ton `keystore`, entre les mots de passe, choisis la configuration **release**.
     * Laisse les autres options par défaut.
     * Clique sur **Finish**.
   * Android Studio générera un fichier `app-release.aab` (dans `android/app/build/outputs/bundle/release/`) ou `app-release.apk` (dans `…/outputs/apk/release/`).

6. **Vérifier le binaire**

   * Pour tester l’APK sur ton propre appareil (USB ou émulateur), tu peux faire :

     ```bash
     adb install -r android/app/build/outputs/apk/release/app-release.apk
     ```
   * Pour le tester sur un appareil non débridé, convertis l’AAB en APK via Google Play (remplacement automatique sur la Play Console), ou génère un APK multi-ABI via Android Studio.

---

## 4. Publier sur Google Play Store

1. **Créer une nouvelle application dans la Play Console**

   * Clique sur **All apps > Create app**.
   * Choisis un nom (visible dans le store), la langue principale, caté­gorie (Application ou Jeu, puis catégorie métier).
   * Accepte les conditions et crée l’application.

2. **Fournir les informations de base**

   * **Titre, description courte et longue** (en respectant les limites de caractères).
   * **Icônes (512 × 512 px)** et images promotionnelles (dimensions requises).
   * **Captures d’écran** :

     * Au minimum : une capture d’écran d’Android (1080 × 1920) ou d’une tablette.
     * Si ton app a des fonctionnalités spécifiques (carte, hublot 3D…), ajoute des captures d’écran pertinentes (par exemple, une capture de l’onglet « Carte » ou « Hublot »).
   * **Vidéo promotionnelle YouTube (optionnel)**.

3. **Paramètres du contenu (content rating)**

   * Réponds au questionnaire pour obtenir une classification « PEGI » ou « ESRB » selon les régions.
   * Sans éléments sensibles, tu obtiendras probablement un « Tout public » (PEGI 3 / Everyone).

4. **Politique de confidentialité**

   * Si ton app collecte la moindre donnée personnelle (position GPS, email, authentification), tu dois fournir un lien vers ta politique de confidentialité hébergée sur un domaine HTTPS.
   * Exemple : `https://www.mondomaine.com/privacy.html`.

5. **Remplir les sections “Pricing & Distribution”**

   * Gratuit ou payant (pour la plupart des apps, « Gratuit »).
   * Cocher les pays où tu veux distribuer (par défaut, tous les pays).
   * SMS, publicité, collecte de données (si tu en as, coche les cases correspondantes).

6. **Téléverser le binaire (AAB ou APK)**

   * Dans la section **Production > App releases**, clique sur « Create new release ».
   * Téléverse ton fichier `app-release.aab`.
   * Ajoute des notes de version (changelog) pour que les utilisateurs voient les nouveautés.
   * Clique sur « Save », puis sur « Review release ».
   * Finalement, clique sur **Start rollout to Production** ou « Publish ».

7. **Vérification de la conformité**

   * Google va examiner ton application (contrôle automatique + parfois contrôle manuel) pour vérifier qu’elle respecte les règles du Play Store (contenu, politique, sécurité).
   * Si tout est en ordre, ton app sera publiée généralement en quelques heures à une journée.

---

## 5. Configurer et générer le binaire iOS (IPA)

1. **Ouvrir le projet dans Xcode**

   * Depuis la racine du projet Ionic/Capacitor :

     ```bash
     npx cap open ios
     ```
   * Cela ouvre Xcode avec le workspace `.xcworkspace` (dans le dossier `ios/App/` ou similaire).

2. **Vérifier le Bundle Identifier et la version**

   * Dans Xcode, sélectionne le target **AppName-iOS**.
   * Dans l’onglet **General > Bundle Identifier**, assure-toi qu’il correspond à ton ID (ex. `com.mondomaine.appname`).
   * Dans **Version** et **Build**, mets des valeurs cohérentes :

     * **Version** = `1.0.0`
     * **Build** = `1`

3. **Configurer le provisioning profile et le certificat de distribution**

   * Dans **Signing & Capabilities**, choisis ton **Team (équipe Apple Developer)**.
   * Active la case “Automatically manage signing” pour qu’Xcode génère un certificate & provisioning profile pour toi.
   * Vérifie que le profile créé est de type **iOS Distribution** (pour publication sur l’App Store).

4. **S’assurer que tous les frameworks sont bien ajoutés**

   * Capacitor gère la plupart des dépendances, mais vérifie que `Capacitor.framework` et `CapacitorCordova.framework` (ou celui de Cordova si tu utilises Cordova) sont présents.
   * Vérifie aussi que `Leaflet.framework` (si tu l’as ajouté manuellement) ou tout plugin tiers (Ionic Native) sont bien enregistrés sous **Frameworks, Libraries, and Embedded Content**.

5. **Tester sur un device réel ou simulateur**

   * Connecte un iPhone ou iPad, sélectionne-le comme target, clique sur **Run** pour vérifier que l’app se lance sans erreur.
   * Vérifie les fonctionnalité critiques : carte Leaflet, slider, Three.js, appels HTTP.

6. **Archiver l’app pour la soumission**

   * Dans Xcode, choisis **Product > Archive**.
   * Xcode va construire une archive `.xcarchive`.
   * Quand l’archive est prête, la fenêtre « Organizer » s’ouvre.

7. **Exporter l’IPA pour TestFlight/App Store**

   * Dans l’Organiser, sélectionne l’archive la plus récente, puis **Distribute App**.
   * Choisis **App Store Connect > Upload** (pour TestFlight et App Store).
   * Suis les étapes :

     * Vérifier que le certificat de distribution est correct.
     * Sélectionner le provisioning profile.
     * Indiquer si tu veux inclure les bitcode (généralement oui).
     * Attendre qu’Xcode achemine l’IPA vers App Store Connect.

---

## 6. Publier sur l’App Store

1. **Se connecter à App Store Connect**

   * Va sur [https://appstoreconnect.apple.com/](https://appstoreconnect.apple.com/)
   * Connecte-toi avec ton compte Apple Developer.

2. **Créer une nouvelle application**

   * Dans « My Apps », clique sur le « + » → **New App**.
   * Renseigne :

     * **Name** : Titre de l’app (ex. “BoB On Board”)
     * **Primary Language** : Français (ou autre selon ta cible)
     * **Bundle ID** : le même identifiant que dans Xcode (ex. `com.mondomaine.appname`)
     * **SKU** : une référence unique interne (ex. `com.mondomaine.bobonboard.ios`)
     * **User Access** : l’équipe/developeurs pouvant gérer cette app.

3. **Remplir les informations de l’app**

   * **Pricing and Availability** : Gratuit ou payant, pays de distribution.
   * **App Privacy** : questionnaire RGPD/collecte de données (position, email, etc.).
   * **App Information** :

     * **Subtitle**, **Promotional Text** (optionnel), **Description**, **Keywords**, **Support URL**, **Marketing URL**.
   * **Upload des médias** :

     * Icônes (`1024 × 1024 px` sans bord arrondi).
     * **Screenshots** iPhone (environ 5.5″ ou 6.5″).
     * **Screenshots** iPad (optionnel, si tu supportes iPad).
     * **App Preview** (courte vidéo, optionnel).

4. **Gérer la build envoyée**

   * Une fois Xcode terminé, la build apparaît dans App Store Connect sous l’onglet **TestFlight** (si tu téléverses pour test) ou dans **App Store > iOS App** (si tu téléverses directement pour production).
   * Sélectionne la build, remplis les informations de version (changelog), et clique sur **Submit for Review**.
   * Apple va vérifier ton app (automatique + manuel) : cela peut prendre quelques jours (parfois 24 h, souvent jusqu’à 48 h).

5. **Suivi de la validation et publication**

   * Dans App Store Connect, tu verras la progression (Waiting for Review, In Review, Approved, etc.).
   * Lorsque l’app est approuvée, elle devient disponible sur l’App Store (sous réserve que tu aies choisi la date de publication « immediately »).

---

## 7. Ajouter un spinner “Chargement” avant d’afficher l’app

Quel que soit le store, l’utilisateur qui installe et ouvre l’app devra souvent patienter quelques secondes pendant que Ionic/Cordova/Capacitor initialisent la partie web native, chargent les plugins, et effectuent d’éventuelles requêtes au démarrage (e.g. `loadRealFlightData()`). Pour ne pas afficher une page blanche au lancement, il est recommandé :

1. **Utiliser le mécanisme de splash screen**

   * Capacitor/Cordova affiche par défaut un **SplashScreen** (logo + fond blanc ou personnalisé) pendant que l’app se lance.
   * Dans `capacitor.config.ts` ou `config.xml`, tu peux configurer le **duration** (durée) du splash screen (typiquement 2 s).
   * Pendant ce temps, tu as l’illusion que l’app charge instantanément.

2. **Dans le composant racine (AppComponent ou la page d’accueil)**

   * À `ngOnInit()`, affiche un `<ion-spinner>` au centre.
   * Appelle ta logique d’initialisation (recherche de vol, Firestore, etc.).
   * Dès que tout est prêt (observables émis, cartes prêtes, etc.), masque le spinner et affiche le contenu réel (`<ion-router-outlet>` ou la page principale).

Exemple simplifié dans `app.component.ts` :

```ts
export class AppComponent implements OnInit {
  isAppReady = false;

  ngOnInit() {
    // 1. Affiche le splash screen natif (géré par Capacitor)
    // 2. En parallèle, réalise l'initialisation asynchrone :
    this.initializeApp();
  }

  async initializeApp() {
    // Exemple : attendre 2 secondes ou jusqu'à la fin d'une tâche importante
    await this.someCriticalInit();
    this.isAppReady = true; // désactive l'overlay du spinner
  }
}
```

Dans `app.component.html` :

```html
<ion-app>
  <ion-splash-screen *ngIf="!isAppReady">
    <!-- Personnalise ton splash avec ton logo + un ion-spinner si tu veux -->
    <div class="splash-container">
      <img src="assets/icon/logo.png" />
      <ion-spinner name="crescent"></ion-spinner>
      <p>Chargement de l’application…</p>
    </div>
  </ion-splash-screen>

  <div *ngIf="isAppReady">
    <ion-router-outlet></ion-router-outlet>
  </div>
</ion-app>
```

Et dans `global.scss` (ou un fichier SCSS partagé) :

```scss
.splash-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #ffffff; // ou ta couleur de splash
  img {
    width: 150px;
    margin-bottom: 16px;
  }
  ion-spinner {
    margin-bottom: 8px;
  }
}
```

---

## 8. Résumé du processus de publication

1. **Configurer les comptes développeurs (Google / Apple)**
2. **Construire l’app** (Ionic → web assets → Capacitor/Cordova → projet natif Android/iOS)
3. **Signer les binaires** (keystore Android, provisioning profile iOS)
4. **Générer un AAB/APK signé** et un IPA signé
5. **Créer la fiche produit sur Play Console / App Store Connect**
6. **Téléverser le binaire** et remplir les métadonnées (icônes, captures d’écran, description, etc.)
7. **Soumettre pour relecture** (Google/Apple), attendre validation et publication
8. **Pendant le lancement en natif**, s’appuyer sur le Splash Screen et un `<ion-spinner>` pour annoncer à l’utilisateur que l’app charge.

---

En suivant ces étapes, ton application Ionic deviendra accessible sur le Google Play Store (pour Android) et sur l’App Store (pour iOS), avec un retour visuel—splash screen et spinner—pour informer l’utilisateur pendant les temps de chargement.
