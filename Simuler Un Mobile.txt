Pour avoir un aperçu fidèle de l’application Ionic telle qu’elle se comportera sur un appareil mobile (iOS ou Android), tu disposes de plusieurs méthodes : émulateurs/simulateurs natifs ou émulation dans un navigateur. Ci-dessous, j’explique les principales approches et les commandes associées.

---

## 1. Émulation dans le navigateur (rapide, sans installation native)

### 1.1. **Ionic Lab**

Ionic Lab te permet de voir simultanément à quoi ressemblerait ton app sur plusieurs plateformes (iOS et Android) directement dans le navigateur.

1. Dans le terminal, à la racine de ton projet :

   ```
   ionic serve --lab
   ```
2. Le navigateur s’ouvre sur une fenêtre divisée :

   * À gauche, une colonne “iOS” qui affiche le rendu comme sur un iPhone.
   * À droite, une colonne “Android” qui montre le rendu comme sur un appareil Android.
3. Toute modification de code (HTML/TS/SCSS) se met à jour en temps réel grâce au live-reload.

**Avantages :** rapide à lancer, pas besoin d’Android Studio ou Xcode, tu vois les rubriques “status bar” et “navigation bar” d’Android/iOS.
**Limites :** ce n’est qu’une simulation visuelle (HTML/CSS), pas de vrai WebView ni de plugins natives (Geolocation, caméra, etc.).

---

### 1.2. **Chrome DevTools – Mode Appareil**

Tu peux aussi émuler un mobile directement dans une fenêtre de Chrome :

1. Lance :

   ```
   ionic serve
   ```
2. Ouvre le navigateur à l’adresse indiquée (généralement `http://localhost:8100`).
3. Dans Chrome, appuie sur **F12** (ou clic droit → “Inspecter”) pour ouvrir DevTools.
4. Clique sur l’icône “Toggle device toolbar” (ou fais Ctrl + Shift + M) pour passer en mode “Appareil”.
5. En haut, choisis un modèle (Pixel, iPhone X, Galaxy S9, etc.). Tu peux ajuster le zoom, la résolution, la densité d’écran (DPR).
6. Recharge la page si nécessaire (Ctrl + R) pour voir la version responsive.

**Avantages :** très rapide, tu testes responsive, rotation, touch events simulés.
**Limites :** toujours dans un navigateur Desktop (Chrome), pas de vrai runtime mobile, pas d’accès aux plugins Cordova/Capacitor natifs.

---

## 2. Utiliser un émulateur Android ou un simulateur iOS (plus réaliste)

Pour tester les fonctionnalités natives (GPS, caméra, storage, plugins Capacitor / Cordova), il faut construire l’app pour la plateforme mobile et la lancer dans un émulateur (Android Studio) ou un simulateur (Xcode).

### 2.1. **Android – Émulateur AVD**

1. **Installer Android Studio** si ce n’est pas déjà fait.
2. Dans Android Studio → **AVD Manager** (Android Virtual Device Manager) → créer ou choisir un “device configuration” (Pixel 4, Nexus 5X, etc.) avec une image Android compatible (API 29, 30, 31 …).
3. Démarre l’émulateur (clic sur la flèche verte).
4. Dans ton projet Ionic qui utilise Capacitor (ou Cordova), exécute :

   ```
   ionic build --prod
   npx cap copy android
   npx cap open android
   ```

   → cela ouvre Android Studio avec le projet natif (`android/`).
5. Dans Android Studio :

   * Sélectionne l’AVD déjà démarré ou un autre émulateur dans la liste des cibles en haut.
   * Clique sur **Run ▶** (triangle vert) ou **Debug** pour installer l’APK sur l’émulateur.

   Ou, depuis la ligne de commande, tu peux aussi faire (l’AVD doit déjà tourner) :

   ```
   npx cap run android -l --emulator
   ```

   L’option `-l` (live-reload) synchronise automatiquement le code web si tu modifies du HTML/SCSS/TS, tant que l’émulateur est lancé.

**Avantages :** tu as un vrai environnement Android (WebView, plugins, GPS simulé, accès au stockage).
**Limites :** l’émulateur peut être plus lent qu’un appareil réel, installation d’Android Studio (assez volumineux).

---

### 2.2. **iOS – Simulateur Xcode**

*(nécessite un Mac + Xcode installé)*

1. **Installe Xcode** depuis l’App Store si ce n’est pas déjà fait.
2. Dans ton projet Ionic :

   ```
   ionic build --prod
   npx cap copy ios
   npx cap open ios
   ```

   → cela ouvre Xcode avec le workspace iOS (`ios/App/App.xcworkspace`).
3. Dans Xcode :

   * En haut à gauche, choisis un simulateur (iPhone 13, iPhone SE, iPad Pro, etc.).
   * Clique sur **Run ▶** (ou Cmd + R).
   * Le simulateur iOS se lance (si nécessaire) et installe l’IPA dans un iPhone virtuel.

   Pour livrer un build live-reload, tu peux faire :

   ```
   npx cap run ios -l --target="iPhone 13"
   ```

   Ça déploie ton code sur le simulateur iOS et autorise le livereload du code web (HTML/TS/SCSS).

**Avantages :** vrai environnement iOS (Safari WebView, plugins Cordova/Capacitor, CoreLocation, etc.).
**Limites :** ne fonctionne que sur macOS + Xcode, raccourcis parfois plus longs à lancer que l’émulateur Android.

---

## 3. Tester sur un appareil physique

### 3.1. **Android réel (via USB ou Wi-Fi)**

1. Activer le **mode développeur** et **débogage USB** sur ton téléphone Android.
2. Branche le téléphone en USB au PC (ou configure ADB via Wi-Fi).
3. Dans le terminal, vérifie qu’il est bien détecté :

   ```
   adb devices
   ```

   Tu dois voir ton device listé.
4. Exécute :

   ```
   ionic build --prod
   npx cap copy android
   npx cap run android --device
   ```

   → l’application se compile et s’installe directement sur ton téléphone.
5. Pour voir le livereload en temps réel :

   ```
   ionic cap run android -l --external
   ```

   ou

   ```
   ionic cap run android -l --external --device
   ```

   * L’option `--external` expose le serveur de livereload sur ton réseau local (ex. `http://192.168.1.42:8100`) pour que le WebView de l’app puisse y accéder.

### 3.2. **iOS réel (via USB)**

*(uniquement sur macOS)*

1. Branche l’iPhone ou l’iPad à ton Mac via USB.
2. Autorise le débogage sur l’appareil si demandé.
3. Ouvre Xcode (`npx cap open ios`).
4. Sélectionne ton appareil physique dans la liste des cibles (à la place du simulateur).
5. Clique sur **Run ▶** (Cmd + R).
6. Xcode signe automatiquement l’application (via ton provisioning profile) et l’installe sur ton iPhone.

Pour livereload :

```
ionic cap run ios -l --external --device
```

Le WebView de l’app pointe vers ton PC (ex. `http://192.168.1.42:8100`) pour recharger à chaud dès que tu modifies du code.

---

## 4. Comparatif rapide des méthodes

| Méthode                                | Facilité           | Réalisme                     | Plugins natifs ? | Remarques                                             |
| -------------------------------------- | ------------------ | ---------------------------- | ---------------- | ----------------------------------------------------- |
| **Ionic Lab (`ionic serve --lab`)**    | Très rapide        | Faible (juste CSS/HTML)      | Non              | Pas de vrais plugins, mais tu vois visuel iOS/Android |
| **Chrome DevTools (device mode)**      | Très rapide        | Faible                       | Non              | Idéal pour le responsive, pas pour les plugins natifs |
| **Émulateur Android (Android Studio)** | Moyennement rapide | Élevé (vrai WebView Android) | Oui              | Nécessite Android Studio ; parfois lent               |
| **Simulateur iOS (Xcode)**             | Moyennement rapide | Élevé (vrai WebView iOS)     | Oui              | Nécessite un Mac + Xcode                              |
| **Appareil Android réel**              | Moyen à long       | Très élevé (vrai contexte)   | Oui              | Besoin d’activer le “debug USB” ou Wi-Fi ADB          |
| **Appareil iOS réel**                  | Moyen à long       | Très élevé (vrai contexte)   | Oui              | Nécessite un Mac + provisioning profile               |

---

## 5. Étapes résumé pour “simuler” sur mobile

1. **Décide si tu veux une émulation rapide (Ionic Lab / Chrome) ou un vrai test natif**.
2. Si tu veux un test rapide, lance `ionic serve --lab` ou `ionic serve` + Chrome DevTools.
3. Si tu veux un test natif Android :

   * Installe Android Studio + crée un AVD.
   * Dans ton projet :

     ```
     ionic build --prod
     npx cap copy android
     npx cap run android -l --emulator
     ```
4. Si tu veux un test natif iOS (sur Mac) :

   * Installe Xcode.
   * Dans ton projet :

     ```
     ionic build --prod
     npx cap copy ios
     npx cap run ios -l --target="iPhone 13"
     ```
5. Pour un test sur un appareil physique :

   * Active le mode développeur (Android) ou provisionne l’app (iOS).
   * Lance la commande équivalente avec `--device`.
   * Utilise `-l --external` si tu veux le live-reload en Wi-Fi.

---

En suivant ces méthodes, tu pourras simuler en toute confiance le rendu et le comportement de ton application Ionic sur mobile, avant même de la publier sur un store ou d’y installer une version de test.
