/**
 * Test de performance apr√®s correction de la boucle infinie
 * V√©rifie que les appels API ne sont plus r√©p√©t√©s
 */

async function runTests() {
  console.log('üß™ Test de performance apr√®s correction');
  console.log('=====================================');

  // Simulation des corrections apport√©es
  const mockTripsPage = {
    timezoneEnrichmentInProgress: false,
    ongoingTrips: [],
    upcomingTrips: [],
    pastTrips: [],
    
    // Simulation de la m√©thode corrig√©e
    async enrichPlansWithTimezoneAbbr(trips) {
      if (this.timezoneEnrichmentInProgress) {
        console.log('‚ö†Ô∏è enrichPlansWithTimezoneAbbr d√©j√† en cours, ignor√©');
        return;
      }
      
      console.log('üîç enrichPlansWithTimezoneAbbr appel√© avec', trips.length, 'voyages');
      this.timezoneEnrichmentInProgress = true;
      
      try {
        for (const trip of trips) {
          if (trip.plans) {
            for (const plan of trip.plans) {
              if (plan.type === 'flight') {
                // V√©rifier si d√©j√† enrichi
                if (plan.departureTzAbbr && plan.arrivalTzAbbr) {
                  console.log('      ‚úÖ D√©j√† enrichi, ignor√©');
                  continue;
                }
                
                console.log('      üõ´ Traitement du vol...');
                // Simulation d'appel API
                plan.departureTzAbbr = 'CEST (UTC +2)';
                plan.arrivalTzAbbr = 'EEST (UTC +3)';
              }
            }
          }
        }
      } finally {
        this.timezoneEnrichmentInProgress = false;
      }
      console.log('üéØ enrichPlansWithTimezoneAbbr termin√©');
    }
  };

  // Test 1: V√©rifier que les appels multiples sont bloqu√©s
  console.log('\nüìã Test 1: Protection contre les appels multiples');
  await mockTripsPage.enrichPlansWithTimezoneAbbr([{ plans: [{ type: 'flight' }] }]);
  await mockTripsPage.enrichPlansWithTimezoneAbbr([{ plans: [{ type: 'flight' }] }]); // Doit √™tre ignor√©

  // Test 2: V√©rifier que les plans d√©j√† enrichis sont ignor√©s
  console.log('\nüìã Test 2: Cache local des plans enrichis');
  const tripWithEnrichedPlan = {
    plans: [{
      type: 'flight',
      departureTzAbbr: 'CEST (UTC +2)',
      arrivalTzAbbr: 'EEST (UTC +3)'
    }]
  };
  await mockTripsPage.enrichPlansWithTimezoneAbbr([tripWithEnrichedPlan]);

  // Test 3: Simulation du service timezone avec cache
  console.log('\nüìã Test 3: Cache du service timezone');
  const mockTimezoneService = {
    gptCache: new Map(),
    GPT_CACHE_TIMESTAMPS: new Map(),
    GPT_CACHE_DURATION: 60 * 60 * 1000,
    
    isGptCacheValid(key) {
      const timestamp = this.GPT_CACHE_TIMESTAMPS.get(key);
      if (!timestamp) return false;
      return (Date.now() - timestamp) < this.GPT_CACHE_DURATION;
    },
    
    async getTimezoneAbbreviationFromCity(city, date) {
      const cacheKey = `${city}_${date}`;
      if (this.isGptCacheValid(cacheKey)) {
        const cached = this.gptCache.get(cacheKey);
        if (cached) {
          console.log('      ‚úÖ Cache GPT hit pour', city);
          return cached;
        }
      }
      
      console.log('      üåê Appel API GPT pour', city);
      const result = { abbr: 'CEST', offset: '+2', label: 'CEST (UTC +2)' };
      this.gptCache.set(cacheKey, result);
      this.GPT_CACHE_TIMESTAMPS.set(cacheKey, Date.now());
      return result;
    }
  };

  // Test des appels r√©p√©t√©s
  console.log('Premier appel pour Gen√®ve:');
  await mockTimezoneService.getTimezoneAbbreviationFromCity('Gen√®ve', '2024-07-01');
  console.log('Deuxi√®me appel pour Gen√®ve (doit utiliser le cache):');
  await mockTimezoneService.getTimezoneAbbreviationFromCity('Gen√®ve', '2024-07-01');

  console.log('\n‚úÖ Tests de performance termin√©s');
  console.log('Les corrections devraient emp√™cher:');
  console.log('- Les appels API r√©p√©t√©s');
  console.log('- Les boucles infinies');
  console.log('- Le ralentissement du navigateur');
}

// Ex√©cuter les tests
runTests().catch(console.error); 