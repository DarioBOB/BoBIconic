/**
 * Script de chargement du voyage d√©mo Montr√©al dans Firestore
 * 
 * Ce script cr√©e un voyage complet "Gen√®ve-Montr√©al / Road Trip Qu√©bec 15 jours"
 * pour l'utilisateur d√©mo avec tous les plans d√©taill√©s.
 * 
 * Usage: node scripts/load-montreal-demo-trip.js
 */

const { initializeApp } = require('firebase/app');
const { getFirestore, collection, addDoc, doc, setDoc, Timestamp } = require('firebase/firestore');

// Configuration Firebase (utiliser les m√™mes cl√©s que l'app)
const firebaseConfig = {
  apiKey: "AIzaSyBQ876_Ci6AWLBV5-nmkqLDKnCI3929v0E",
  authDomain: "bob-app-9cbfe.firebaseapp.com",
  projectId: "bob-app-9cbfe",
  storageBucket: "bob-app-9cbfe.appspot.com",
  messagingSenderId: "163592997424",
  appId: "1:163592997424:web:ece12127e2e3f07a66bbf5",
  measurementId: "G-EMZ3P925JF"
};

// Initialiser Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// ID de l'utilisateur d√©mo
const DEMO_USER_ID = 'fUBBVpboDeaUjD6w2nz0xKni9mG3';

// Dates de base du voyage (seront recalcul√©es dynamiquement dans l'app)
const BASE_START_DATE = new Date('2025-09-10T00:00:00Z');
const BASE_END_DATE = new Date('2025-09-25T23:59:59Z');

/**
 * Cr√©e le voyage principal
 */
async function createMainTrip() {
  console.log('üõ´ Cr√©ation du voyage principal...');
  
  const tripData = {
    title: {
      fr: 'Gen√®ve ‚Äì Montr√©al / Road Trip Qu√©bec 15 jours',
      en: 'Geneva ‚Äì Montreal / Quebec Road Trip 15 days'
    },
    description: {
      fr: 'Voyage d√©mo complet avec vol, h√©bergements, activit√©s et locations de voiture au Qu√©bec',
      en: 'Complete demo trip with flight, accommodations, activities and car rentals in Quebec'
    },
    startDate: Timestamp.fromDate(BASE_START_DATE),
    endDate: Timestamp.fromDate(BASE_END_DATE),
    userId: DEMO_USER_ID,
    type: 'vacation',
    from: 'Gen√®ve',
    to: 'Montr√©al',
    createdByDemo: true,
    createdAt: Timestamp.now(),
    updatedAt: Timestamp.now()
  };

  const tripRef = await addDoc(collection(db, 'trips'), tripData);
  console.log(`‚úÖ Voyage cr√©√© avec ID: ${tripRef.id}`);
  return tripRef.id;
}

/**
 * Cr√©e un plan de vol
 */
async function createFlightPlan(tripId, flightData) {
  const planData = {
    tripId: tripId,
    type: 'flight',
    title: flightData.title,
    description: flightData.description,
    startDate: Timestamp.fromDate(flightData.startDate),
    endDate: Timestamp.fromDate(flightData.endDate),
    startTime: Timestamp.fromDate(flightData.startDate),
    endTime: Timestamp.fromDate(flightData.endDate),
    userId: DEMO_USER_ID,
    createdByDemo: true,
    details: {
      flight: {
        flight_number: flightData.flightNumber,
        airline: flightData.airline,
        aircraft: flightData.aircraft,
        departure: flightData.departure,
        arrival: flightData.arrival,
        confirmation: flightData.confirmation,
        duration: flightData.duration
      }
    }
  };

  const planRef = await addDoc(collection(db, 'plans'), planData);
  console.log(`‚úàÔ∏è Plan de vol cr√©√©: ${flightData.flightNumber}`);
  return planRef.id;
}

/**
 * Cr√©e un plan d'h√©bergement
 */
async function createHotelPlan(tripId, hotelData) {
  const planData = {
    tripId: tripId,
    type: 'hotel',
    title: hotelData.title,
    description: hotelData.description,
    startDate: Timestamp.fromDate(hotelData.checkIn),
    endDate: Timestamp.fromDate(hotelData.checkOut),
    userId: DEMO_USER_ID,
    createdByDemo: true,
    details: {
      hotel: {
        name: hotelData.name,
        address: hotelData.address,
        phone: hotelData.phone,
        checkIn: hotelData.checkIn,
        checkOut: hotelData.checkOut
      }
    }
  };

  const planRef = await addDoc(collection(db, 'plans'), planData);
  console.log(`üè® Plan h√¥tel cr√©√©: ${hotelData.name}`);
  return planRef.id;
}

/**
 * Cr√©e un plan de location de voiture
 */
async function createCarRentalPlan(tripId, carData) {
  const planData = {
    tripId: tripId,
    type: 'car_rental',
    title: carData.title,
    description: carData.description,
    startDate: Timestamp.fromDate(carData.startDate),
    endDate: Timestamp.fromDate(carData.endDate),
    userId: DEMO_USER_ID,
    createdByDemo: true,
    details: {
      car_rental: {
        company: carData.company,
        location: carData.location,
        address: carData.address,
        model: carData.model,
        reservation: carData.reservation
      }
    }
  };

  const planRef = await addDoc(collection(db, 'plans'), planData);
  console.log(`üöó Plan location cr√©√©: ${carData.company}`);
  return planRef.id;
}

/**
 * Cr√©e un plan d'activit√©
 */
async function createActivityPlan(tripId, activityData) {
  const planData = {
    tripId: tripId,
    type: 'activity',
    title: activityData.title,
    description: activityData.description,
    startDate: Timestamp.fromDate(activityData.startDate),
    endDate: Timestamp.fromDate(activityData.endDate),
    userId: DEMO_USER_ID,
    createdByDemo: true,
    details: {
      activity: {
        name: activityData.name,
        location: activityData.location,
        duration: activityData.duration,
        reservation: activityData.reservation,
        guide: activityData.guide
      }
    }
  };

  const planRef = await addDoc(collection(db, 'plans'), planData);
  console.log(`üéüÔ∏è Plan activit√© cr√©√©: ${activityData.name}`);
  return planRef.id;
}

/**
 * Charge tous les plans du voyage
 */
async function loadAllPlans(tripId) {
  console.log('üìã Chargement de tous les plans...');

  // Vol aller - Gen√®ve √† Montr√©al
  await createFlightPlan(tripId, {
    title: { fr: 'Vol U2 5129 Gen√®ve ‚Üí Montr√©al', en: 'Flight U2 5129 Geneva ‚Üí Montreal' },
    description: { fr: 'Vol direct EasyJet vers Montr√©al-Trudeau', en: 'Direct EasyJet flight to Montreal-Trudeau' },
    startDate: new Date('2025-09-10T08:40:00Z'), // 10h40 UTC+2
    endDate: new Date('2025-09-10T17:00:00Z'),   // 13h00 UTC-4
    flightNumber: 'U2 5129',
    airline: 'EasyJet',
    aircraft: 'Airbus A320',
    departure: { code: 'GVA', city: 'Gen√®ve', name: 'A√©roport de Gen√®ve' },
    arrival: { code: 'YUL', city: 'Montr√©al', name: 'A√©roport Montr√©al-Trudeau' },
    confirmation: 'EZK52P9',
    duration: '8h20'
  });

  // Location voiture - Montr√©al
  await createCarRentalPlan(tripId, {
    title: { fr: 'Location voiture - Montr√©al', en: 'Car rental - Montreal' },
    description: { fr: 'Location Avis √† l\'a√©roport de Montr√©al', en: 'Avis car rental at Montreal airport' },
    startDate: new Date('2025-09-10T17:30:00Z'), // 13h30 UTC-4
    endDate: new Date('2025-09-25T14:00:00Z'),   // 10h00 UTC-4
    company: 'Avis',
    location: 'Montr√©al A√©roport YUL',
    address: '975 Blvd. Rom√©o-Vachon N, Dorval, QC H4Y 1H1',
    model: 'Toyota RAV4 automatique',
    reservation: 'MONTREAL2025AVIS'
  });

  // H√¥tel Montr√©al (10-12 sept.)
  await createHotelPlan(tripId, {
    title: { fr: 'H√¥tel Bonaventure Montr√©al', en: 'Hotel Bonaventure Montreal' },
    description: { fr: 'H√©bergement au centre-ville de Montr√©al', en: 'Downtown Montreal accommodation' },
    checkIn: new Date('2025-09-10T19:00:00Z'),  // 15h00 UTC-4
    checkOut: new Date('2025-09-12T15:00:00Z'), // 11h00 UTC-4
    name: 'H√¥tel Bonaventure Montr√©al',
    address: '900 Rue de la Gaucheti√®re O, Montr√©al, QC H5A 1E4',
    phone: '+1 514-878-2332'
  });

  // Activit√© - Vieux-Montr√©al & Mont Royal
  await createActivityPlan(tripId, {
    title: { fr: 'Vieux-Montr√©al & Mont Royal', en: 'Old Montreal & Mount Royal' },
    description: { fr: 'Visite guid√©e historique + mont√©e Mont Royal', en: 'Historical guided tour + Mount Royal climb' },
    startDate: new Date('2025-09-11T13:00:00Z'), // 09h00 UTC-4
    endDate: new Date('2025-09-11T16:30:00Z'),   // 12h30 UTC-4
    name: 'Visite guid√©e historique + mont√©e Mont Royal',
    location: 'Place d\'Armes, Vieux-Montr√©al',
    duration: '3h30',
    reservation: 'HISTO-VMX21',
    guide: 'Guide en fran√ßais'
  });

  // Route Montr√©al ‚Üí Qu√©bec City
  await createActivityPlan(tripId, {
    title: { fr: 'Route Montr√©al ‚Üí Qu√©bec City', en: 'Route Montreal ‚Üí Quebec City' },
    description: { fr: 'Trajet en voiture vers Qu√©bec City', en: 'Car journey to Quebec City' },
    startDate: new Date('2025-09-12T15:00:00Z'), // 11h00 UTC-4
    endDate: new Date('2025-09-12T18:30:00Z'),   // 14h30 UTC-4
    name: 'Route vers Qu√©bec City',
    location: 'Montr√©al ‚Üí Qu√©bec City',
    duration: '3h30',
    reservation: null,
    guide: null
  });

  // H√¥tel Qu√©bec City (12-15 sept.)
  await createHotelPlan(tripId, {
    title: { fr: 'Auberge Saint-Antoine', en: 'Auberge Saint-Antoine' },
    description: { fr: 'H√©bergement dans le Vieux-Qu√©bec', en: 'Accommodation in Old Quebec' },
    checkIn: new Date('2025-09-12T19:00:00Z'),  // 15h00 UTC-4
    checkOut: new Date('2025-09-15T14:30:00Z'), // 10h30 UTC-4
    name: 'Auberge Saint-Antoine',
    address: '8 Rue Saint-Antoine, Vieux-Qu√©bec, QC G1K 4C9',
    phone: null
  });

  // Activit√© - Chute Montmorency + Croisi√®re
  await createActivityPlan(tripId, {
    title: { fr: 'Chute Montmorency + Croisi√®re', en: 'Montmorency Falls + Cruise' },
    description: { fr: 'Visite de la chute et croisi√®re sur le fleuve', en: 'Falls visit and river cruise' },
    startDate: new Date('2025-09-13T13:00:00Z'), // 09h00 UTC-4
    endDate: new Date('2025-09-13T17:00:00Z'),   // 13h00 UTC-4
    name: 'Chute Montmorency + Croisi√®re',
    location: 'Quai de Qu√©bec',
    duration: '4h00',
    reservation: 'CROQ2025',
    guide: 'Guide bilingue'
  });

  // Vol interne Qu√©bec ‚Üí Gasp√©
  await createFlightPlan(tripId, {
    title: { fr: 'Vol AC8832 Qu√©bec ‚Üí Gasp√©', en: 'Flight AC8832 Quebec ‚Üí Gaspe' },
    description: { fr: 'Vol interne Air Canada vers Gasp√©', en: 'Internal Air Canada flight to Gaspe' },
    startDate: new Date('2025-09-15T13:30:00Z'), // 09h30 UTC-4
    endDate: new Date('2025-09-15T14:45:00Z'),   // 10h45 UTC-4
    flightNumber: 'AC8832',
    airline: 'Air Canada',
    aircraft: 'Bombardier CRJ',
    departure: { code: 'YQB', city: 'Qu√©bec', name: 'A√©roport de Qu√©bec' },
    arrival: { code: 'YGP', city: 'Gasp√©', name: 'A√©roport de Gasp√©' },
    confirmation: 'INT-YQB-GSP-SEP',
    duration: '1h15'
  });

  // Location Gasp√©
  await createCarRentalPlan(tripId, {
    title: { fr: 'Location voiture - Gasp√©', en: 'Car rental - Gaspe' },
    description: { fr: 'Location Budget √† Gasp√©', en: 'Budget car rental in Gaspe' },
    startDate: new Date('2025-09-15T15:00:00Z'), // 11h00 UTC-4
    endDate: new Date('2025-09-18T14:00:00Z'),   // 10h00 UTC-4
    company: 'Budget',
    location: 'Gasp√©',
    address: '75 Rue de l\'A√©roport, Gasp√©, QC G4X 2K1',
    model: 'Voiture compacte',
    reservation: 'GASPE-BUDGET'
  });

  // H√¥tel Gasp√© (15-18 sept.)
  await createHotelPlan(tripId, {
    title: { fr: 'H√¥tel Baker Gasp√©', en: 'Hotel Baker Gaspe' },
    description: { fr: 'H√©bergement √† Gasp√©', en: 'Accommodation in Gaspe' },
    checkIn: new Date('2025-09-15T17:30:00Z'),  // 13h30 UTC-4
    checkOut: new Date('2025-09-18T14:00:00Z'), // 10h00 UTC-4
    name: 'H√¥tel Baker Gasp√©',
    address: '178 Rue de la Reine, Gasp√©, QC G4X 1T6',
    phone: null
  });

  // Excursion - Parc Forillon + Baleines
  await createActivityPlan(tripId, {
    title: { fr: 'Parc Forillon + Baleines', en: 'Forillon Park + Whales' },
    description: { fr: 'Observation des baleines en Zodiac', en: 'Whale watching by Zodiac' },
    startDate: new Date('2025-09-16T12:00:00Z'), // 08h00 UTC-4
    endDate: new Date('2025-09-16T16:30:00Z'),   // 12h30 UTC-4
    name: 'Parc Forillon + Observation baleines',
    location: 'Cap-des-Rosiers, Forillon',
    duration: '4h30',
    reservation: 'BALEINE-FR88',
    guide: 'Guide sp√©cialis√©'
  });

  // Route Gasp√© ‚Üí Perc√©
  await createActivityPlan(tripId, {
    title: { fr: 'Route Gasp√© ‚Üí Perc√©', en: 'Route Gaspe ‚Üí Perce' },
    description: { fr: 'Trajet vers Perc√©', en: 'Journey to Perce' },
    startDate: new Date('2025-09-18T14:00:00Z'), // 10h00 UTC-4
    endDate: new Date('2025-09-18T15:30:00Z'),   // 11h30 UTC-4
    name: 'Route vers Perc√©',
    location: 'Gasp√© ‚Üí Perc√©',
    duration: '1h30',
    reservation: null,
    guide: null
  });

  // H√¥tel Perc√© (18-20 sept.)
  await createHotelPlan(tripId, {
    title: { fr: 'H√¥tel Ri√¥tel Perc√©', en: 'Hotel Riotel Perce' },
    description: { fr: 'H√©bergement √† Perc√©', en: 'Accommodation in Perce' },
    checkIn: new Date('2025-09-18T16:00:00Z'),  // 12h00 UTC-4
    checkOut: new Date('2025-09-20T14:00:00Z'), // 10h00 UTC-4
    name: 'H√¥tel Ri√¥tel Perc√©',
    address: '261 Route 132, Perc√©, QC G0C 2L0',
    phone: null
  });

  // Excursion - Rocher Perc√© + √éle Bonaventure
  await createActivityPlan(tripId, {
    title: { fr: 'Rocher Perc√© + √éle Bonaventure', en: 'Perce Rock + Bonaventure Island' },
    description: { fr: 'Bateau + randonn√©e libre', en: 'Boat + free hiking' },
    startDate: new Date('2025-09-19T13:00:00Z'), // 09h00 UTC-4
    endDate: new Date('2025-09-19T18:00:00Z'),   // 14h00 UTC-4
    name: 'Rocher Perc√© + √éle Bonaventure',
    location: 'Perc√©',
    duration: '5h00',
    reservation: 'ILEBONAV2025',
    guide: 'Guide local'
  });

  // Route Perc√© ‚Üí Rimouski
  await createActivityPlan(tripId, {
    title: { fr: 'Route Perc√© ‚Üí Rimouski', en: 'Route Perce ‚Üí Rimouski' },
    description: { fr: 'Trajet vers Rimouski avec pause d√©jeuner', en: 'Journey to Rimouski with lunch break' },
    startDate: new Date('2025-09-20T12:00:00Z'), // 08h00 UTC-4
    endDate: new Date('2025-09-20T20:30:00Z'),   // 16h30 UTC-4
    name: 'Route vers Rimouski',
    location: 'Perc√© ‚Üí Rimouski (via Matane)',
    duration: '8h30',
    reservation: null,
    guide: null
  });

  // H√¥tel Rimouski (20-21 sept.)
  await createHotelPlan(tripId, {
    title: { fr: 'H√¥tel Rimouski', en: 'Hotel Rimouski' },
    description: { fr: 'H√©bergement √† Rimouski', en: 'Accommodation in Rimouski' },
    checkIn: new Date('2025-09-20T19:00:00Z'),  // 15h00 UTC-4
    checkOut: new Date('2025-09-21T14:00:00Z'), // 10h00 UTC-4
    name: 'H√¥tel Rimouski',
    address: '225 Blvd Ren√©-Lepage E, Rimouski, QC G5L 1P2',
    phone: null
  });

  // Visite - Sous-marin Onondaga + Phare
  await createActivityPlan(tripId, {
    title: { fr: 'Sous-marin Onondaga + Phare', en: 'Onondaga Submarine + Lighthouse' },
    description: { fr: 'Visite du sous-marin et du phare', en: 'Submarine and lighthouse visit' },
    startDate: new Date('2025-09-20T21:00:00Z'), // 17h00 UTC-4
    endDate: new Date('2025-09-20T23:00:00Z'),   // 19h00 UTC-4
    name: 'Sous-marin Onondaga + Phare',
    location: 'Pointe-au-P√®re',
    duration: '2h00',
    reservation: null,
    guide: 'Audio-guide FR/EN'
  });

  // Route Rimouski ‚Üí Tadoussac (via ferry)
  await createActivityPlan(tripId, {
    title: { fr: 'Route Rimouski ‚Üí Tadoussac', en: 'Route Rimouski ‚Üí Tadoussac' },
    description: { fr: 'Trajet avec ferry vers Baie-Comeau', en: 'Journey with ferry to Baie-Comeau' },
    startDate: new Date('2025-09-21T15:00:00Z'), // 11h00 UTC-4
    endDate: new Date('2025-09-21T17:00:00Z'),   // 13h00 UTC-4
    name: 'Route vers Tadoussac (ferry)',
    location: 'Rimouski ‚Üí Tadoussac (ferry)',
    duration: '2h00',
    reservation: null,
    guide: null
  });

  // H√¥tel Tadoussac (21-23 sept.)
  await createHotelPlan(tripId, {
    title: { fr: 'H√¥tel Tadoussac', en: 'Hotel Tadoussac' },
    description: { fr: 'H√©bergement √† Tadoussac', en: 'Accommodation in Tadoussac' },
    checkIn: new Date('2025-09-21T17:00:00Z'),  // 13h00 UTC-4
    checkOut: new Date('2025-09-23T14:00:00Z'), // 10h00 UTC-4
    name: 'H√¥tel Tadoussac',
    address: '165 Rue Bord de l\'Eau, Tadoussac, QC G0T 2A0',
    phone: null
  });

  // Safari baleines Zodiac
  await createActivityPlan(tripId, {
    title: { fr: 'Safari baleines Zodiac', en: 'Whale Safari Zodiac' },
    description: { fr: 'Observation des baleines en Zodiac', en: 'Whale watching by Zodiac' },
    startDate: new Date('2025-09-22T13:30:00Z'), // 09h30 UTC-4
    endDate: new Date('2025-09-22T16:00:00Z'),   // 12h00 UTC-4
    name: 'Safari baleines Zodiac',
    location: 'Centre d\'observation, Tadoussac',
    duration: '2h30',
    reservation: 'WHALE-ZDX-TAD2025',
    guide: 'Guide sp√©cialis√©'
  });

  // Retour √† Montr√©al
  await createActivityPlan(tripId, {
    title: { fr: 'Retour √† Montr√©al', en: 'Return to Montreal' },
    description: { fr: 'Trajet de retour vers Montr√©al', en: 'Return journey to Montreal' },
    startDate: new Date('2025-09-23T14:00:00Z'), // 10h00 UTC-4
    endDate: new Date('2025-09-23T20:30:00Z'),   // 16h30 UTC-4
    name: 'Retour √† Montr√©al',
    location: 'Tadoussac ‚Üí Montr√©al',
    duration: '6h30',
    reservation: null,
    guide: null
  });

  // H√¥tel Montr√©al (23-25 sept.)
  await createHotelPlan(tripId, {
    title: { fr: 'H√¥tel Le Germain', en: 'Hotel Le Germain' },
    description: { fr: 'Derniers jours √† Montr√©al', en: 'Last days in Montreal' },
    checkIn: new Date('2025-09-23T20:30:00Z'),  // 16h30 UTC-4
    checkOut: new Date('2025-09-25T14:00:00Z'), // 10h00 UTC-4
    name: 'H√¥tel Le Germain',
    address: '2050 Rue Mansfield, Montr√©al, QC H3A 1Y9',
    phone: null
  });

  // Retour voiture
  await createActivityPlan(tripId, {
    title: { fr: 'Retour voiture - Montr√©al', en: 'Car return - Montreal' },
    description: { fr: 'Retour de la voiture √† l\'a√©roport', en: 'Car return at airport' },
    startDate: new Date('2025-09-25T14:00:00Z'), // 10h00 UTC-4
    endDate: new Date('2025-09-25T15:00:00Z'),   // 11h00 UTC-4
    name: 'Retour voiture',
    location: 'Montr√©al A√©roport YUL',
    duration: '1h00',
    reservation: null,
    guide: null
  });

  // Vol retour - Montr√©al √† Gen√®ve
  await createFlightPlan(tripId, {
    title: { fr: 'Vol LX 87 Montr√©al ‚Üí Gen√®ve', en: 'Flight LX 87 Montreal ‚Üí Geneva' },
    description: { fr: 'Vol retour SWISS vers Gen√®ve', en: 'SWISS return flight to Geneva' },
    startDate: new Date('2025-09-25T19:15:00Z'), // 15h15 UTC-4
    endDate: new Date('2025-09-26T04:30:00Z'),   // 06h30 UTC+2
    flightNumber: 'LX 87',
    airline: 'SWISS',
    aircraft: 'Airbus A330',
    departure: { code: 'YUL', city: 'Montr√©al', name: 'A√©roport Montr√©al-Trudeau' },
    arrival: { code: 'GVA', city: 'Gen√®ve', name: 'A√©roport de Gen√®ve' },
    confirmation: 'SWISSMTLGVA2025',
    duration: '9h15'
  });

  console.log('‚úÖ Tous les plans ont √©t√© cr√©√©s avec succ√®s !');
}

/**
 * Fonction principale
 */
async function main() {
  try {
    console.log('üöÄ D√©but du chargement du voyage d√©mo Montr√©al...');
    console.log(`üë§ Utilisateur d√©mo: ${DEMO_USER_ID}`);
    
    // Cr√©er le voyage principal
    const tripId = await createMainTrip();
    
    // Charger tous les plans
    await loadAllPlans(tripId);
    
    console.log('üéâ Voyage d√©mo Montr√©al charg√© avec succ√®s !');
    console.log(`üìã ID du voyage: ${tripId}`);
    console.log('üí° Les dates seront recalcul√©es dynamiquement dans l\'application');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du chargement:', error);
    process.exit(1);
  }
}

// Ex√©cuter le script
if (require.main === module) {
  main();
}

module.exports = { main, createMainTrip, loadAllPlans }; 