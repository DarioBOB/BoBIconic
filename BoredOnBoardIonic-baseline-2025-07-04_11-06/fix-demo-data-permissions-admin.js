const admin = require('firebase-admin');
const path = require('path');

// Chemin vers la cl√© de service t√©l√©charg√©e
const serviceAccount = require(path.resolve(__dirname, 'serviceAccountKey.json'));

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

const db = admin.firestore();

async function fixDemoDataPermissions() {
  console.log('üîß [ADMIN] D√©but de la correction des permissions des donn√©es de d√©mo...');

  // 1. Corriger les trips
  const tripsSnapshot = await db.collection('trips').get();
  let tripsFixed = 0;
  for (const tripDoc of tripsSnapshot.docs) {
    const tripData = tripDoc.data();
    const isDemoTrip = tripData.userId === 'fUBBVpboDeaUjD6w2nz0xKni9mG3' ||
      (tripData.userId && tripData.userId.includes('demo')) ||
      tripData.createdByDemo === true;
    if (isDemoTrip) {
      if (tripData.createdByDemo !== true) {
        await tripDoc.ref.update({ createdByDemo: true });
        console.log(`‚úÖ Trip de d√©mo corrig√©: ${tripDoc.id}`);
        tripsFixed++;
      }
    } else {
      if (tripData.createdByDemo !== false) {
        await tripDoc.ref.update({ createdByDemo: false });
        console.log(`üîß Trip non-d√©mo corrig√©: ${tripDoc.id}`);
        tripsFixed++;
      }
    }
  }

  // 2. Corriger les plans
  const plansSnapshot = await db.collection('plans').get();
  let plansFixed = 0;
  for (const planDoc of plansSnapshot.docs) {
    const planData = planDoc.data();
    const isDemoPlan = planData.createdByDemo === true ||
      (planData.userId && planData.userId === 'fUBBVpboDeaUjD6w2nz0xKni9mG3') ||
      (planData.tripId && planData.tripId.includes('demo'));
    if (isDemoPlan) {
      if (planData.createdByDemo !== true) {
        await planDoc.ref.update({ createdByDemo: true });
        console.log(`‚úÖ Plan de d√©mo corrig√©: ${planDoc.id}`);
        plansFixed++;
      }
    } else {
      if (planData.createdByDemo !== false) {
        await planDoc.ref.update({ createdByDemo: false });
        console.log(`üîß Plan non-d√©mo corrig√©: ${planDoc.id}`);
        plansFixed++;
      }
    }
  }

  // 3. Corriger les sous-collections plans dans trips
  for (const tripDoc of tripsSnapshot.docs) {
    const tripData = tripDoc.data();
    const isDemoTrip = tripData.createdByDemo === true || tripData.userId === 'fUBBVpboDeaUjD6w2nz0xKni9mG3';
    if (isDemoTrip) {
      const subPlansSnapshot = await db.collection('trips').doc(tripDoc.id).collection('plans').get();
      for (const subPlanDoc of subPlansSnapshot.docs) {
        const subPlanData = subPlanDoc.data();
        if (subPlanData.createdByDemo !== true) {
          await subPlanDoc.ref.update({ createdByDemo: true });
          console.log(`‚úÖ Sous-plan de d√©mo corrig√©: trips/${tripDoc.id}/plans/${subPlanDoc.id}`);
          plansFixed++;
        }
      }
    }
  }

  console.log(`\nüéâ Correction termin√©e !`);
  console.log(`üìä R√©sum√©:`);
  console.log(`   - Trips corrig√©s: ${tripsFixed}`);
  console.log(`   - Plans corrig√©s: ${plansFixed}`);
  console.log(`\n‚úÖ Toutes les donn√©es de d√©mo ont maintenant createdByDemo: true`);
  console.log(`‚úÖ Toutes les donn√©es non-d√©mo ont maintenant createdByDemo: false`);
  console.log(`\nüöÄ Le mode d√©mo devrait maintenant fonctionner sans erreurs de permissions !`);
}

fixDemoDataPermissions()
  .then(() => {
    console.log('\n‚ú® Script termin√© avec succ√®s !');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Erreur lors de la correction:', error);
    process.exit(1);
  }); 