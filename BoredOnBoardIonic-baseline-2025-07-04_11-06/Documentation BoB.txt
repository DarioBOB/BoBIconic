Documentation d√©taill√©e de l‚Äôapplication BoredOnBoard (BOB)
________________________________________
1. Contexte & objectifs
BoredOnBoard (BOB) est une application mobile con√ßue pour divertir et informer les passagers d‚Äôavion pendant leur vol. D√©velopp√©e avec Ionic/Angular, elle propose :
‚Ä¢	Une visualisation de la progression du vol (position, altitude, vitesse) ;
‚Ä¢	Des informations m√©t√©orologiques √† l‚Äôarriv√©e ou en vol (METAR, AWVX) ;
‚Ä¢	Un syst√®me de gestion de voyages (cr√©ation de trips, plans, points d‚Äôint√©r√™t) stock√© dans Firestore ;
‚Ä¢	Des services annexes (chat, documentation, petits jeux, notifications) ;
‚Ä¢	Un espace administrateur pour superviser utilisateurs et voyages.
L‚Äôobjectif est de fournir un compagnon de vol complet, combinant donn√©es temps r√©el et fonctionnalit√©s sociales/dev.
________________________________________
2. Architecture technique
‚Ä¢	Framework : Ionic 6 + Angular 16 en standalone components.
‚Ä¢	Firebase : Authentification (Email/Password) et Firestore (Stockage users, trips, plans, etc.).
‚Ä¢	Localisation : ngx-translate (assets/i18n/fr.json, en.json) et TranslationService.
‚Ä¢	Backend flight data : Proxy FR24 (fr24ApiBaseUrl), AVWX, r√©cup√©ration via HTTP ;
‚Ä¢	Stockage local : Ionic Storage (hors vol).
‚Ä¢	Divers : .env pour cl√©s (Zoho, OpenAI, AviationStack, OpenSky), ESLint, Prettier, Git.
________________________________________
3. Bootstrap & configuration
‚Ä¢	environment.ts : d√©finit environment.firebase (cl√©s API, authDomain, projectId‚Ä¶), defaultLang, fr24ApiBaseUrl, defaultMapCenter, etc.
‚Ä¢	main.ts : bootstrapApplication(AppComponent) avec :
o	provideRouter(routes, { preloadingStrategy: PreloadAllModules }) ;
o	provideIonicAngular() ;
o	provideFirebaseApp(initializeApp(environment.firebase)), provideAuth(getAuth()), provideFirestore(getFirestore()) ;
o	Import de HttpClientModule, TranslateModule.forRoot(...), IonicStorageModule.forRoot().
________________________________________
4. Authentification & profil utilisateur
‚Ä¢	Pages :
o	EmailAuthPage : connexion / enregistrement par email
o	RegisterPage & RegisterProfilePage : cr√©ation de compte et saisie des infos de profil
o	ProfilePage : consultation & modification du profil (Fire¬¨store)
‚Ä¢	Services/Guards :
o	AuthGuard / RedirectIfAuthenticatedGuard pour contr√¥ler l‚Äôacc√®s aux routes ;
o	adminOnlyGuard pour l‚Äôespace admin ;
o	UserService : wrapper sur Auth.currentUser + lecture du doc Firestore users/{uid}.
________________________________________
5. Navigation & UI globale
‚Ä¢	app.routes.ts : routes principales avec prefixes /auth/email, /landing-tiles, /window, /home, /trips, /admin, etc.
‚Ä¢	AppComponent (standalone) :
o	Menu lat√©ral (SideMenuComponent), barre de statut utilisateur (UserStatusBarComponent)
o	Gestion du changement de langue & titre de page
o	Redirection initiale vers /landing-tiles ou /auth/email selon √©tat auth
________________________________________
6. Page de d√©marrage : Landing Tiles
‚Ä¢	LandingTilesPage :
o	Affichage d‚Äôun tableau de tuiles (Tile { key, icon, route, color }), traduit et color√©
o	R√©cup√©ration du profil Firestore pour langue pr√©f√©r√©e
o	Clic sur tuile ‚Üí router.navigate([route], { state: { wip: true } })
o	Menu toggle & responsive layout Ionic/SCSS
________________________________________
7. Fonctionnalit√©s principales
7.1 Through-My-Window (WindowPage)
‚Ä¢	WindowService : c≈ìur m√©tier de la ¬´ fen√™tre de vol ¬ª :
o	R√©cup√©ration des donn√©es FR24 (historique & live) via proxy backend ;
o	Fallback sur AVWX/METAR (historic + realtime) en cas d‚Äô√©chec ;
o	D√©codage METAR (pression, vent, visibilit√©) et formatage temps/vitesse/dur√©e ;
o	Points d‚Äôint√©r√™t (POI) autour de l‚Äôavion via POIService ;
o	Publication d‚ÄôObservable pour UI r√©active (ngFor, binding)‚Ä¶
‚Ä¢	WindowPage :
o	Formulaire callsign + date facultative ;
o	Affichage des infos vol (FlightInfo), progression, carte/fullscreen map ;
o	Affichage de la m√©t√©o d‚Äôarriv√©e, code m√©t√©o emoji & description ;
o	Utilisation de composants partag√©s : MiniMapComponent, FlightMapComponent, POITableComponent.
7.2 Flight Search & Test
‚Ä¢	FlightSearchComponent : recherche par num√©ro de vol, suggestions, historique minimal
‚Ä¢	FlightTestPage : page de test / d√©mo de la stack FR24 & map (dev)
7.3 Trips & Plans
‚Ä¢	TripsPage : liste des voyages cr√©√©s (Fire¬¨store trips), CRUD basique
‚Ä¢	Planification : depuis chaque trip, rattachement de plans (venues, dates)
‚Ä¢	AdminService : lecture de tous les users + trips + plans pour espace admin
7.4 Autres pages
‚Ä¢	bobbers.page, chat.page, documents.page, support.page, games.page, notifications.page, preferences.page : modules compl√©mentaires pour engagement utilisateurs
________________________________________
8. Services & composants partag√©s
‚Ä¢	Services :
o	WindowService, TrajectoryService (calcul trajectoire), PoiService, GeoStatusService, TranslationService
‚Ä¢	Composants :
o	MiniMapComponent (aper√ßu carte), FlightMapComponent (trajet + plan)
o	PoiTableComponent (liste POI), UserStatusBarComponent, SideMenuComponent
‚Ä¢	SharedModule : regroupe imports communs (CommonModule, IonicModule‚Ä¶)
________________________________________
9. Int√©gration Firebase / Firestore
‚Ä¢	Collection users : doc par uid (email, preferredLang, profile‚Ä¶)
‚Ä¢	Collection trips : champ userId, nom du voyage, dates
‚Ä¢	Collection plans : rattach√©s √† tripId, description, lieu, horaire
‚Ä¢	Auth Email/Password via AngularFire Auth, stockage des sessions util.
________________________________________
10. Localisation & i18n
‚Ä¢	Fichiers assets/i18n/fr.json, en.json pour toutes les cl√©s
‚Ä¢	TranslateModule.forRoot() + HttpLoaderFactory
‚Ä¢	TranslationService pour abstraction des m√©thodes de traduction
________________________________________
11. D√©ploiement & environnement
‚Ä¢	Scripts npm/Ionic : ionic serve, ionic build, ng build --configuration production
‚Ä¢	Fichier .env : cl√©s FR24 Proxy, Zoho SMTP, OpenAI, AviationStack, OpenSky, Ads B Exchange
‚Ä¢	CI/CD envisag√© : d√©ploiement sur Firebase Hosting ou Appflow
________________________________________
12. Prochaines √©volutions & roadmap
‚Ä¢	üåê Notifications Push (Flight status, remises √† jour m√©t√©o)
‚Ä¢	üì∂ Mode Offline (caching parcours & m√©t√©o) ;
‚Ä¢	üó∫Ô∏è Plan de vol interactif (waypoints & altitudes) ;
‚Ä¢	üìä Statistiques & partages (partage de vols, leaderboard)
‚Ä¢	ü§ñ Chatbot IA int√©gr√© via OpenAI (conseils de voyage)
________________________________________
13. Exemples de code et patterns
________________________________________
13.1 Gestion des r√¥les utilisateur (S√©curit√©)
```typescript
// Interface pour typer les r√¥les utilisateur
interface UserRole {
  isAdmin: boolean;
  isDemo: boolean;
}

// M√©thode de chargement du r√¥le depuis Firestore
private async loadUserRole() {
  try {
    this.userRole = { isAdmin: false, isDemo: false };
    
    if (!this.userId) {
      console.warn('[Trips] Pas d\'utilisateur connect√©');
      return;
    }

    // V√©rifier si c'est un utilisateur de d√©mo
    const isDemoUser = this.userId === 'fUBBVpboDeaUjD6w2nz0xKni9mG3' || 
                      this.userId === 'guest-demo' ||
                      this.auth.currentUser?.email?.endsWith('@demo.com');

    if (isDemoUser) {
      this.userRole.isDemo = true;
      return;
    }

    // Charger le document utilisateur pour v√©rifier le r√¥le admin
    const userDoc = await getDoc(doc(this.firestore, 'users', this.userId));
    if (userDoc.exists()) {
      const data = userDoc.data();
      this.userRole.isAdmin = data['role'] === 'admin';
    }
  } catch (err) {
    console.error('[Trips] Erreur chargement r√¥le utilisateur:', err);
  }
}

// M√©thode de v√©rification d'acc√®s
private async checkAccess(tripUserId: string): Promise<boolean> {
  if (!this.userId) return false;
  
  // Les admins ont acc√®s √† tous les voyages
  if (this.userRole.isAdmin) return true;
  
  // Les utilisateurs en mode d√©mo ont acc√®s aux voyages de d√©mo
  if (this.userRole.isDemo) {
    return tripUserId === 'fUBBVpboDeaUjD6w2nz0xKni9mG3' || tripUserId === 'guest-demo';
  }
  
  // Les utilisateurs standards ont acc√®s √† leurs propres voyages
  return tripUserId === this.userId;
}
```

13.2 Gestion du cache local (Robustesse offline)
```typescript
// M√©thodes utilitaires pour le cache
private async saveToCache(key: string, data: any) {
  try {
    await this.storage.set(key, {
      data,
      timestamp: Date.now()
    });
  } catch (err) {
    console.error('[Trips] Erreur sauvegarde cache:', err);
  }
}

private async getFromCache<T>(key: string, maxAgeMs = 3600000): Promise<T | null> {
  try {
    const cached = await this.storage.get(key);
    if (!cached) return null;
    
    const age = Date.now() - cached.timestamp;
    if (age > maxAgeMs) {
      await this.storage.remove(key);
      return null;
    }
    
    return cached.data;
  } catch (err) {
    console.error('[Trips] Erreur lecture cache:', err);
    return null;
  }
}

// Gestion des cl√©s de cache avec s√©paration par utilisateur
private getCacheKey(prefix: string, id?: string): string {
  const userId = this.userId || 'anonymous';
  return `${prefix}_${userId}${id ? `_${id}` : ''}`;
}

// Chargement avec fallback cache
async loadTrips() {
  this.isLoading = true;
  this.error = null;

  try {
    // 1. Charger depuis le cache d'abord
    const cacheKey = this.getCacheKey('trips');
    const cachedTrips = await this.getFromCache<Trip[]>(cacheKey);
    
    if (cachedTrips) {
      this.processTrips(cachedTrips);
      console.log('[Trips] Donn√©es charg√©es depuis le cache');
    }

    // 2. Charger depuis Firestore en parall√®le
    const tripsQuery = query(
      collection(this.firestore, 'trips'),
      where('userId', '==', this.userId)
    );
    
    const querySnapshot = await getDocs(tripsQuery);
    const trips: Trip[] = [];
    
    for (const doc of querySnapshot.docs) {
      const data = doc.data();
      if (await this.validateTripData(data) && await this.checkAccess(data.userId)) {
        trips.push({
          id: doc.id,
          title: data.title,
          startDate: (data.startDate as Timestamp).toDate(),
          endDate: (data.endDate as Timestamp).toDate(),
          status: this.getTripStatus((data.startDate as Timestamp).toDate(), (data.endDate as Timestamp).toDate()),
          showDetails: false,
          loadingPlans: false
        });
      }
    }

    // 3. Mettre √† jour l'affichage et le cache
    this.processTrips(trips);
    await this.saveToCache(cacheKey, trips);
    
  } catch (err) {
    console.error('[Trips] Erreur chargement voyages:', err);
    this.error = 'TRIPS.ERROR_LOADING';
    await this.showErrorToast('TRIPS.ERROR_LOADING');
  } finally {
    this.isLoading = false;
  }
}
```

13.3 Validation des donn√©es (S√©curit√© et robustesse)
```typescript
// Validation des donn√©es de voyage
private async validateTripData(data: any): Promise<boolean> {
  if (!data['title'] || !data['startDate'] || !data['endDate']) {
    await this.showErrorToast('TRIPS.ERROR_INVALID_DATA');
    return false;
  }

  // V√©rification des dates
  const startDate = (data['startDate'] as Timestamp).toDate();
  const endDate = (data['endDate'] as Timestamp).toDate();
  if (isNaN(startDate.getTime()) || isNaN(endDate.getTime()) || endDate < startDate) {
    await this.showErrorToast('TRIPS.ERROR_INVALID_DATE');
    return false;
  }

  return true;
}

// Validation des donn√©es de plan
private async validatePlanData(data: any): Promise<boolean> {
  if (!data['title'] || !data['type'] || !data['startDate'] || !data['endDate']) {
    await this.showErrorToast('TRIPS.ERROR_INVALID_PLAN');
    return false;
  }

  // V√©rification du type
  const validTypes = ['flight', 'hotel', 'car', 'activity', 'other'];
  if (!validTypes.includes(data['type'])) {
    await this.showErrorToast('TRIPS.ERROR_INVALID_PLAN_TYPE');
    return false;
  }

  return true;
}
```

13.4 Gestion des erreurs et notifications (UX)
```typescript
// M√©thode utilitaire pour afficher les erreurs
private async showErrorToast(key: string, params?: any) {
  const message = this.translate.instant(key, params);
  const toast = await this.toastCtrl.create({
    message,
    duration: 3000,
    position: 'bottom',
    color: 'danger'
  });
  await toast.present();
}

// Gestion des erreurs avec contexte
try {
  // Code susceptible d'√©chouer
} catch (err) {
  console.error('[Trips] Erreur avec contexte:', {
    userId: this.userId,
    action: 'loadTrips',
    error: err
  });
  this.error = 'TRIPS.ERROR_LOADING';
  await this.showErrorToast('TRIPS.ERROR_LOADING');
}
```

13.5 Internationalisation et traductions
```typescript
// Service de traduction
@Injectable({ providedIn: 'root' })
export class TranslationService {
  constructor(private translate: TranslateService) {}

  setLanguage(lang: 'fr' | 'en') {
    this.translate.use(lang);
    localStorage.setItem('lang', lang);
  }

  getCurrentLang(): 'fr' | 'en' {
    return this.translate.currentLang as 'fr' | 'en' || 'fr';
  }
}

// Utilisation dans les composants
export class TripsPage {
  constructor(private translate: TranslateService) {}

  getTitle(title: any): string {
    if (typeof title === 'string') return title;
    if (typeof title === 'object' && title[this.getCurrentLang()]) {
      return title[this.getCurrentLang()];
    }
    return 'Titre inconnu';
  }

  getCurrentLang(): 'fr' | 'en' {
    return this.translate.currentLang as 'fr' | 'en' || 'fr';
  }
}
```

13.6 Configuration d'environnement dynamique
```typescript
// environment.ts
export const environment = {
  production: false,
  firebase: {
    apiKey: "AIzaSyBQ876_Ci6AWLBV5-nmkqLDKnCI3929v0E",
    authDomain: "bob-app-9cbfe.firebaseapp.com",
    projectId: "bob-app-9cbfe",
    storageBucket: "bob-app-9cbfe.appspot.com",
    messagingSenderId: "163592997424",
    appId: "1:163592997424:web:ece12127e2e3f07a66bbf5",
    measurementId: "G-EMZ3P925JF"
  },
  fr24ApiBaseUrl: 'http://localhost:5001', // Configurable pour desktop/mobile
  defaultLang: 'fr',
  defaultMapCenter: { lat: 46.8182, lng: 8.2275 } // Suisse
};

// Utilisation dans WindowService
async searchFlight(callsign: string) {
  const url = `${environment.fr24ApiBaseUrl}/api/flightradar/history/${callsign}`;
  // ... reste du code
}
```

13.7 R√®gles de s√©curit√© Firestore
```javascript
// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour v√©rifier si l'utilisateur est admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Fonction pour v√©rifier si l'utilisateur est en mode d√©mo
    function isDemo() {
      return request.auth.uid == 'fUBBVpboDeaUjD6w2nz0xKni9mG3' || 
             request.auth.uid == 'guest-demo' ||
             request.auth.token.email.matches('.*@demo[.]com');
    }

    // R√®gles pour la collection trips
    match /trips/{tripId} {
      allow read: if isAdmin() || 
                 resource.data.userId == request.auth.uid ||
                 (isDemo() && resource.data.userId in ['fUBBVpboDeaUjD6w2nz0xKni9mG3', 'guest-demo']);
      allow write: if isAdmin() ||
                  (request.auth.uid == request.resource.data.userId && !isDemo());
    }

    // R√®gles pour la collection plans
    match /plans/{planId} {
      allow read: if isAdmin() ||
                 exists(/databases/$(database)/documents/trips/$(resource.data.tripId)) &&
                 (
                   get(/databases/$(database)/documents/trips/$(resource.data.tripId)).data.userId == request.auth.uid ||
                   (isDemo() && get(/databases/$(database)/documents/trips/$(resource.data.tripId)).data.userId in ['fUBBVpboDeaUjD6w2nz0xKni9mG3', 'guest-demo'])
                 );
      allow write: if isAdmin() ||
                  (
                    exists(/databases/$(database)/documents/trips/$(request.resource.data.tripId)) &&
                    get(/databases/$(database)/documents/trips/$(request.resource.data.tripId)).data.userId == request.auth.uid &&
                    !isDemo()
                  );
    }
  }
}
```

________________________________________
14. Guide de tests et strat√©gie de test
________________________________________
14.1 Tests manuels recommand√©s
```bash
# Tests de connectivit√©
- Mode connect√© (Firestore OK)
- Mode offline (cache uniquement)
- Mode d√©mo
- Utilisateur admin
- Utilisateur standard sans voyage

# Tests de s√©curit√©
- V√©rifier que l'utilisateur standard ne voit que ses voyages
- V√©rifier que l'admin voit tous les voyages
- V√©rifier que le mode d√©mo affiche les donn√©es de d√©mo
- Tester les acc√®s non autoris√©s

# Tests de robustesse
- Simuler des erreurs r√©seau
- Tester le fallback cache
- V√©rifier les messages d'erreur
- Tester l'expiration du cache

# Tests d'internationalisation
- Changer de langue et v√©rifier tous les textes
- Tester les formats de date selon la langue
- V√©rifier les messages d'erreur traduits
```

14.2 Checklist de validation UAT
- [ ] Acc√®s et affichage des voyages
- [ ] S√©curit√© et r√¥les utilisateur
- [ ] Authentification et administration
- [ ] Robustesse et gestion des erreurs
- [ ] Exp√©rience utilisateur (UX)
- [ ] Internationalisation
- [ ] Fen√™tre de vol (Window)
- [ ] Sc√©narios offline/online
- [ ] Documentation et suivi

________________________________________
15. Proc√©dures de maintenance et mises √† jour
________________________________________
15.1 Mise √† jour des d√©pendances
```bash
# V√©rifier les mises √† jour disponibles
npm outdated

# Mettre √† jour Angular/Ionic
ng update @angular/core @angular/cli
ng update @ionic/angular

# Mettre √† jour les autres d√©pendances
npm update

# V√©rifier la compatibilit√© apr√®s mise √† jour
npm run test
npm run build
```

15.2 D√©ploiement et configuration
```bash
# Build de production
npm run build

# Test local du build
ionic serve --prod

# D√©ploiement Firebase
firebase deploy

# Configuration des variables d'environnement
# V√©rifier environment.ts et environment.prod.ts
```

15.3 Monitoring et logs
```typescript
// Ajout de logs structur√©s
console.log('[Trips] Action effectu√©e:', {
  action: 'loadTrips',
  userId: this.userId,
  timestamp: new Date().toISOString(),
  result: 'success'
});

// Gestion des erreurs avec contexte
console.error('[Trips] Erreur:', {
  action: 'loadTrips',
  userId: this.userId,
  error: err.message,
  stack: err.stack
});
```

________________________________________
16. Guide de contribution et workflow Git
________________________________________
16.1 Workflow de d√©veloppement
```bash
# 1. Cr√©er une branche pour la fonctionnalit√©
git checkout -b feature/nom-de-la-fonctionnalite

# 2. D√©velopper et tester
# - Suivre les conventions de code
# - Ajouter des tests si n√©cessaire
# - Documenter les changements

# 3. Commiter avec un message descriptif
git add .
git commit -m "feat: ajouter gestion du cache local pour les voyages

- Impl√©mentation du cache avec Ionic Storage
- Fallback automatique en cas d'erreur r√©seau
- Tests de robustesse ajout√©s"

# 4. Pousser et cr√©er une pull request
git push origin feature/nom-de-la-fonctionnalite
```

16.2 Conventions de code
- **Noms de fichiers** : kebab-case (ex: `trips.page.ts`)
- **Noms de classes** : PascalCase (ex: `TripsPage`)
- **Noms de m√©thodes** : camelCase (ex: `loadTrips`)
- **Constantes** : UPPER_SNAKE_CASE (ex: `MAX_CACHE_AGE`)
- **Interfaces** : PascalCase avec pr√©fixe I optionnel (ex: `UserRole`)

16.3 Messages de commit
- **feat** : nouvelle fonctionnalit√©
- **fix** : correction de bug
- **docs** : documentation
- **style** : formatage, point-virgules manquants, etc.
- **refactor** : refactorisation du code
- **test** : ajout ou modification de tests
- **chore** : mise √† jour de build, d√©pendances, etc.

16.4 Checklist avant commit
- [ ] Code fonctionne et passe les tests
- [ ] Documentation mise √† jour si n√©cessaire
- [ ] Fichiers de suivi mis √† jour (CHANGES.md, DONE_TRIPS.md)
- [ ] Messages d'erreur traduits
- [ ] Gestion des cas d'erreur
- [ ] Respect des conventions de code
